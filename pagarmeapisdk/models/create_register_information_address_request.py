# -*- coding: utf-8 -*-

"""
pagarmeapisdk

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""


class CreateRegisterInformationAddressRequest(object):

    """Implementation of the 'CreateRegisterInformationAddressRequest' model.

    Register Information Address

    Attributes:
        street (str): The model property of type str.
        complementary (str): The model property of type str.
        street_number (str): The model property of type str.
        neighborhood (str): The model property of type str.
        city (str): The model property of type str.
        state (str): The model property of type str.
        zip_code (str): The model property of type str.
        reference_point (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "street": 'street',
        "complementary": 'complementary',
        "street_number": 'street_number',
        "neighborhood": 'neighborhood',
        "city": 'city',
        "state": 'state',
        "zip_code": 'zip_code',
        "reference_point": 'reference_point'
    }

    def __init__(self,
                 street=None,
                 complementary=None,
                 street_number=None,
                 neighborhood=None,
                 city=None,
                 state=None,
                 zip_code=None,
                 reference_point=None):
        """Constructor for the CreateRegisterInformationAddressRequest class"""

        # Initialize members of the class
        self.street = street 
        self.complementary = complementary 
        self.street_number = street_number 
        self.neighborhood = neighborhood 
        self.city = city 
        self.state = state 
        self.zip_code = zip_code 
        self.reference_point = reference_point 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        street = dictionary.get("street") if dictionary.get("street") else None
        complementary = dictionary.get("complementary") if dictionary.get("complementary") else None
        street_number = dictionary.get("street_number") if dictionary.get("street_number") else None
        neighborhood = dictionary.get("neighborhood") if dictionary.get("neighborhood") else None
        city = dictionary.get("city") if dictionary.get("city") else None
        state = dictionary.get("state") if dictionary.get("state") else None
        zip_code = dictionary.get("zip_code") if dictionary.get("zip_code") else None
        reference_point = dictionary.get("reference_point") if dictionary.get("reference_point") else None
        # Return an object of this model
        return cls(street,
                   complementary,
                   street_number,
                   neighborhood,
                   city,
                   state,
                   zip_code,
                   reference_point)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'street={self.street!r}, '
                f'complementary={self.complementary!r}, '
                f'street_number={self.street_number!r}, '
                f'neighborhood={self.neighborhood!r}, '
                f'city={self.city!r}, '
                f'state={self.state!r}, '
                f'zip_code={self.zip_code!r}, '
                f'reference_point={self.reference_point!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'street={self.street!s}, '
                f'complementary={self.complementary!s}, '
                f'street_number={self.street_number!s}, '
                f'neighborhood={self.neighborhood!s}, '
                f'city={self.city!s}, '
                f'state={self.state!s}, '
                f'zip_code={self.zip_code!s}, '
                f'reference_point={self.reference_point!s})')

# -*- coding: utf-8 -*-

"""
pagarmeapisdk

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pagarmeapisdk.api_helper import APIHelper
from pagarmeapisdk.models.create_address_request import CreateAddressRequest
from pagarmeapisdk.models.create_phones_request import CreatePhonesRequest


class UpdateCustomerRequest(object):

    """Implementation of the 'UpdateCustomerRequest' model.

    Request for updating a customer

    Attributes:
        name (str): Name
        email (str): Email
        document (str): Document number
        mtype (str): Person type
        address (CreateAddressRequest): Address
        metadata (Dict[str, str]): Metadata
        phones (CreatePhonesRequest): The model property of type
            CreatePhonesRequest.
        code (str): Código de referência do cliente no sistema da loja. Max:
            52 caracteres
        gender (str): Gênero do cliente
        document_type (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "email": 'email',
        "document": 'document',
        "mtype": 'type',
        "address": 'address',
        "metadata": 'metadata',
        "phones": 'phones',
        "code": 'code',
        "gender": 'gender',
        "document_type": 'document_type'
    }

    _optionals = [
        'name',
        'email',
        'document',
        'mtype',
        'address',
        'metadata',
        'phones',
        'code',
        'gender',
        'document_type',
    ]

    def __init__(self,
                 name=APIHelper.SKIP,
                 email=APIHelper.SKIP,
                 document=APIHelper.SKIP,
                 mtype=APIHelper.SKIP,
                 address=APIHelper.SKIP,
                 metadata=APIHelper.SKIP,
                 phones=APIHelper.SKIP,
                 code=APIHelper.SKIP,
                 gender=APIHelper.SKIP,
                 document_type=APIHelper.SKIP):
        """Constructor for the UpdateCustomerRequest class"""

        # Initialize members of the class
        if name is not APIHelper.SKIP:
            self.name = name 
        if email is not APIHelper.SKIP:
            self.email = email 
        if document is not APIHelper.SKIP:
            self.document = document 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        if address is not APIHelper.SKIP:
            self.address = address 
        if metadata is not APIHelper.SKIP:
            self.metadata = metadata 
        if phones is not APIHelper.SKIP:
            self.phones = phones 
        if code is not APIHelper.SKIP:
            self.code = code 
        if gender is not APIHelper.SKIP:
            self.gender = gender 
        if document_type is not APIHelper.SKIP:
            self.document_type = document_type 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        name = dictionary.get("name") if dictionary.get("name") else APIHelper.SKIP
        email = dictionary.get("email") if dictionary.get("email") else APIHelper.SKIP
        document = dictionary.get("document") if dictionary.get("document") else APIHelper.SKIP
        mtype = dictionary.get("type") if dictionary.get("type") else APIHelper.SKIP
        address = CreateAddressRequest.from_dictionary(dictionary.get('address')) if 'address' in dictionary.keys() else APIHelper.SKIP
        metadata = dictionary.get("metadata") if dictionary.get("metadata") else APIHelper.SKIP
        phones = CreatePhonesRequest.from_dictionary(dictionary.get('phones')) if 'phones' in dictionary.keys() else APIHelper.SKIP
        code = dictionary.get("code") if dictionary.get("code") else APIHelper.SKIP
        gender = dictionary.get("gender") if dictionary.get("gender") else APIHelper.SKIP
        document_type = dictionary.get("document_type") if dictionary.get("document_type") else APIHelper.SKIP
        # Return an object of this model
        return cls(name,
                   email,
                   document,
                   mtype,
                   address,
                   metadata,
                   phones,
                   code,
                   gender,
                   document_type)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'name={(self.name if hasattr(self, "name") else None)!r}, '
                f'email={(self.email if hasattr(self, "email") else None)!r}, '
                f'document={(self.document if hasattr(self, "document") else None)!r}, '
                f'mtype={(self.mtype if hasattr(self, "mtype") else None)!r}, '
                f'address={(self.address if hasattr(self, "address") else None)!r}, '
                f'metadata={(self.metadata if hasattr(self, "metadata") else None)!r}, '
                f'phones={(self.phones if hasattr(self, "phones") else None)!r}, '
                f'code={(self.code if hasattr(self, "code") else None)!r}, '
                f'gender={(self.gender if hasattr(self, "gender") else None)!r}, '
                f'document_type={(self.document_type if hasattr(self, "document_type") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'name={(self.name if hasattr(self, "name") else None)!s}, '
                f'email={(self.email if hasattr(self, "email") else None)!s}, '
                f'document={(self.document if hasattr(self, "document") else None)!s}, '
                f'mtype={(self.mtype if hasattr(self, "mtype") else None)!s}, '
                f'address={(self.address if hasattr(self, "address") else None)!s}, '
                f'metadata={(self.metadata if hasattr(self, "metadata") else None)!s}, '
                f'phones={(self.phones if hasattr(self, "phones") else None)!s}, '
                f'code={(self.code if hasattr(self, "code") else None)!s}, '
                f'gender={(self.gender if hasattr(self, "gender") else None)!s}, '
                f'document_type={(self.document_type if hasattr(self, "document_type") else None)!s})')

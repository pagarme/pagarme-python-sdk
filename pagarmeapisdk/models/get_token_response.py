# -*- coding: utf-8 -*-

"""
pagarmeapisdk

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pagarmeapisdk.api_helper import APIHelper
from pagarmeapisdk.models.get_card_token_response import GetCardTokenResponse


class GetTokenResponse(object):

    """Implementation of the 'GetTokenResponse' model.

    Token data

    Attributes:
        id (str): The model property of type str.
        mtype (str): The model property of type str.
        created_at (datetime): The model property of type datetime.
        expires_at (str): The model property of type str.
        card (GetCardTokenResponse): The model property of type
            GetCardTokenResponse.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "mtype": 'type',
        "created_at": 'created_at',
        "expires_at": 'expires_at',
        "card": 'card'
    }

    _optionals = [
        'id',
        'mtype',
        'created_at',
        'expires_at',
        'card',
    ]

    _nullables = [
        'id',
        'mtype',
        'created_at',
        'expires_at',
        'card',
    ]

    def __init__(self,
                 id=APIHelper.SKIP,
                 mtype=APIHelper.SKIP,
                 created_at=APIHelper.SKIP,
                 expires_at=APIHelper.SKIP,
                 card=APIHelper.SKIP):
        """Constructor for the GetTokenResponse class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        if created_at is not APIHelper.SKIP:
            self.created_at = APIHelper.apply_datetime_converter(created_at, APIHelper.RFC3339DateTime) if created_at else None 
        if expires_at is not APIHelper.SKIP:
            self.expires_at = expires_at 
        if card is not APIHelper.SKIP:
            self.card = card 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if "id" in dictionary.keys() else APIHelper.SKIP
        mtype = dictionary.get("type") if "type" in dictionary.keys() else APIHelper.SKIP
        if 'created_at' in dictionary.keys():
            created_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("created_at")).datetime if dictionary.get("created_at") else None
        else:
            created_at = APIHelper.SKIP
        expires_at = dictionary.get("expires_at") if "expires_at" in dictionary.keys() else APIHelper.SKIP
        if 'card' in dictionary.keys():
            card = GetCardTokenResponse.from_dictionary(dictionary.get('card')) if dictionary.get('card') else None
        else:
            card = APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   mtype,
                   created_at,
                   expires_at,
                   card)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'id={(self.id if hasattr(self, "id") else None)!r}, '
                f'mtype={(self.mtype if hasattr(self, "mtype") else None)!r}, '
                f'created_at={(self.created_at if hasattr(self, "created_at") else None)!r}, '
                f'expires_at={(self.expires_at if hasattr(self, "expires_at") else None)!r}, '
                f'card={(self.card if hasattr(self, "card") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'id={(self.id if hasattr(self, "id") else None)!s}, '
                f'mtype={(self.mtype if hasattr(self, "mtype") else None)!s}, '
                f'created_at={(self.created_at if hasattr(self, "created_at") else None)!s}, '
                f'expires_at={(self.expires_at if hasattr(self, "expires_at") else None)!s}, '
                f'card={(self.card if hasattr(self, "card") else None)!s})')

# -*- coding: utf-8 -*-

"""
pagarmeapisdk

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pagarmeapisdk.api_helper import APIHelper
from pagarmeapisdk.models.create_card_request import CreateCardRequest


class CreateVoucherPaymentRequest(object):

    """Implementation of the 'CreateVoucherPaymentRequest' model.

    The settings for creating a voucher payment

    Attributes:
        statement_descriptor (str): The text that will be shown on the
            voucher's statement
        card_id (str): Card id
        card_token (str): Card token
        card (CreateCardRequest): Card info
        recurrency_cycle (str): Defines whether the card has been used one or
            more times.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "statement_descriptor": 'statement_descriptor',
        "card_id": 'card_id',
        "card_token": 'card_token',
        "card": 'Card',
        "recurrency_cycle": 'recurrency_cycle'
    }

    _optionals = [
        'statement_descriptor',
        'card_id',
        'card_token',
        'card',
        'recurrency_cycle',
    ]

    def __init__(self,
                 statement_descriptor=APIHelper.SKIP,
                 card_id=APIHelper.SKIP,
                 card_token=APIHelper.SKIP,
                 card=APIHelper.SKIP,
                 recurrency_cycle=APIHelper.SKIP):
        """Constructor for the CreateVoucherPaymentRequest class"""

        # Initialize members of the class
        if statement_descriptor is not APIHelper.SKIP:
            self.statement_descriptor = statement_descriptor 
        if card_id is not APIHelper.SKIP:
            self.card_id = card_id 
        if card_token is not APIHelper.SKIP:
            self.card_token = card_token 
        if card is not APIHelper.SKIP:
            self.card = card 
        if recurrency_cycle is not APIHelper.SKIP:
            self.recurrency_cycle = recurrency_cycle 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        statement_descriptor = dictionary.get("statement_descriptor") if dictionary.get("statement_descriptor") else APIHelper.SKIP
        card_id = dictionary.get("card_id") if dictionary.get("card_id") else APIHelper.SKIP
        card_token = dictionary.get("card_token") if dictionary.get("card_token") else APIHelper.SKIP
        card = CreateCardRequest.from_dictionary(dictionary.get('Card')) if 'Card' in dictionary.keys() else APIHelper.SKIP
        recurrency_cycle = dictionary.get("recurrency_cycle") if dictionary.get("recurrency_cycle") else APIHelper.SKIP
        # Return an object of this model
        return cls(statement_descriptor,
                   card_id,
                   card_token,
                   card,
                   recurrency_cycle)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'statement_descriptor={(self.statement_descriptor if hasattr(self, "statement_descriptor") else None)!r}, '
                f'card_id={(self.card_id if hasattr(self, "card_id") else None)!r}, '
                f'card_token={(self.card_token if hasattr(self, "card_token") else None)!r}, '
                f'card={(self.card if hasattr(self, "card") else None)!r}, '
                f'recurrency_cycle={(self.recurrency_cycle if hasattr(self, "recurrency_cycle") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'statement_descriptor={(self.statement_descriptor if hasattr(self, "statement_descriptor") else None)!s}, '
                f'card_id={(self.card_id if hasattr(self, "card_id") else None)!s}, '
                f'card_token={(self.card_token if hasattr(self, "card_token") else None)!s}, '
                f'card={(self.card if hasattr(self, "card") else None)!s}, '
                f'recurrency_cycle={(self.recurrency_cycle if hasattr(self, "recurrency_cycle") else None)!s})')

# -*- coding: utf-8 -*-

"""
pagarmeapisdk

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pagarmeapisdk.api_helper import APIHelper
from pagarmeapisdk.models.create_google_pay_intermediate_signing_key_request import CreateGooglePayIntermediateSigningKeyRequest


class CreateGooglePayRequest(object):

    """Implementation of the 'CreateGooglePayRequest' model.

    The GooglePay Token Payment Request

    Attributes:
        version (str): Informação sobre a versão do token. Único valor aceito
            é EC_v2
        data (str): Dados de pagamento criptografados. Corresponde ao
            encryptedMessage do token Google.
        intermediate_signing_key
            (CreateGooglePayIntermediateSigningKeyRequest): The GooglePay
            intermediate signing key request
        signature (str): Assinatura dos dados de pagamento. Verifica se a
            origem da mensagem é o Google. Corresponde ao signature do token
            Google.
        signed_message (str): The model property of type str.
        merchant_identifier (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "version": 'version',
        "data": 'data',
        "intermediate_signing_key": 'intermediate_signing_key',
        "signature": 'signature',
        "signed_message": 'signed_message',
        "merchant_identifier": 'merchant_identifier'
    }

    _optionals = [
        'version',
        'data',
        'intermediate_signing_key',
        'signature',
        'signed_message',
        'merchant_identifier',
    ]

    _nullables = [
        'version',
        'data',
        'intermediate_signing_key',
        'signature',
        'signed_message',
        'merchant_identifier',
    ]

    def __init__(self,
                 version=APIHelper.SKIP,
                 data=APIHelper.SKIP,
                 intermediate_signing_key=APIHelper.SKIP,
                 signature=APIHelper.SKIP,
                 signed_message=APIHelper.SKIP,
                 merchant_identifier=APIHelper.SKIP):
        """Constructor for the CreateGooglePayRequest class"""

        # Initialize members of the class
        if version is not APIHelper.SKIP:
            self.version = version 
        if data is not APIHelper.SKIP:
            self.data = data 
        if intermediate_signing_key is not APIHelper.SKIP:
            self.intermediate_signing_key = intermediate_signing_key 
        if signature is not APIHelper.SKIP:
            self.signature = signature 
        if signed_message is not APIHelper.SKIP:
            self.signed_message = signed_message 
        if merchant_identifier is not APIHelper.SKIP:
            self.merchant_identifier = merchant_identifier 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        version = dictionary.get("version") if "version" in dictionary.keys() else APIHelper.SKIP
        data = dictionary.get("data") if "data" in dictionary.keys() else APIHelper.SKIP
        if 'intermediate_signing_key' in dictionary.keys():
            intermediate_signing_key = CreateGooglePayIntermediateSigningKeyRequest.from_dictionary(dictionary.get('intermediate_signing_key')) if dictionary.get('intermediate_signing_key') else None
        else:
            intermediate_signing_key = APIHelper.SKIP
        signature = dictionary.get("signature") if "signature" in dictionary.keys() else APIHelper.SKIP
        signed_message = dictionary.get("signed_message") if "signed_message" in dictionary.keys() else APIHelper.SKIP
        merchant_identifier = dictionary.get("merchant_identifier") if "merchant_identifier" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(version,
                   data,
                   intermediate_signing_key,
                   signature,
                   signed_message,
                   merchant_identifier)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'version={(self.version if hasattr(self, "version") else None)!r}, '
                f'data={(self.data if hasattr(self, "data") else None)!r}, '
                f'intermediate_signing_key={(self.intermediate_signing_key if hasattr(self, "intermediate_signing_key") else None)!r}, '
                f'signature={(self.signature if hasattr(self, "signature") else None)!r}, '
                f'signed_message={(self.signed_message if hasattr(self, "signed_message") else None)!r}, '
                f'merchant_identifier={(self.merchant_identifier if hasattr(self, "merchant_identifier") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'version={(self.version if hasattr(self, "version") else None)!s}, '
                f'data={(self.data if hasattr(self, "data") else None)!s}, '
                f'intermediate_signing_key={(self.intermediate_signing_key if hasattr(self, "intermediate_signing_key") else None)!s}, '
                f'signature={(self.signature if hasattr(self, "signature") else None)!s}, '
                f'signed_message={(self.signed_message if hasattr(self, "signed_message") else None)!s}, '
                f'merchant_identifier={(self.merchant_identifier if hasattr(self, "merchant_identifier") else None)!s})')

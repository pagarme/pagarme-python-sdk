# -*- coding: utf-8 -*-

"""
pagarmeapisdk

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pagarmeapisdk.api_helper import APIHelper
from pagarmeapisdk.models.create_antifraud_request import CreateAntifraudRequest
from pagarmeapisdk.models.create_customer_request import CreateCustomerRequest
from pagarmeapisdk.models.create_device_request import CreateDeviceRequest
from pagarmeapisdk.models.create_location_request import CreateLocationRequest
from pagarmeapisdk.models.create_order_item_request import CreateOrderItemRequest
from pagarmeapisdk.models.create_payment_request import CreatePaymentRequest
from pagarmeapisdk.models.create_shipping_request import CreateShippingRequest
from pagarmeapisdk.models.create_sub_merchant_request import CreateSubMerchantRequest


class CreateOrderRequest(object):

    """Implementation of the 'CreateOrderRequest' model.

    Request for creating an order

    Attributes:
        items (List[CreateOrderItemRequest]): Items
        customer (CreateCustomerRequest): Customer
        payments (List[CreatePaymentRequest]): Payment data
        code (str): The order code
        customer_id (str): The customer id
        shipping (CreateShippingRequest): Shipping data
        metadata (Dict[str, str]): Metadata
        antifraud_enabled (bool): Defines whether the order will go through
            anti-fraud
        ip (str): Ip address
        session_id (str): Session id
        location (CreateLocationRequest): Request's location
        device (CreateDeviceRequest): Device's informations
        closed (bool): The model property of type bool.
        currency (str): Currency
        antifraud (CreateAntifraudRequest): The model property of type
            CreateAntifraudRequest.
        submerchant (CreateSubMerchantRequest): SubMerchant

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "items": 'items',
        "customer": 'customer',
        "payments": 'payments',
        "code": 'code',
        "closed": 'closed',
        "customer_id": 'customer_id',
        "shipping": 'shipping',
        "metadata": 'metadata',
        "antifraud_enabled": 'antifraud_enabled',
        "ip": 'ip',
        "session_id": 'session_id',
        "location": 'location',
        "device": 'device',
        "currency": 'currency',
        "antifraud": 'antifraud',
        "submerchant": 'submerchant'
    }

    _optionals = [
        'customer_id',
        'shipping',
        'metadata',
        'antifraud_enabled',
        'ip',
        'session_id',
        'location',
        'device',
        'currency',
        'antifraud',
        'submerchant',
    ]

    _nullables = [
        'customer_id',
        'metadata',
    ]

    def __init__(self,
                 items=None,
                 customer=None,
                 payments=None,
                 code=None,
                 closed=True,
                 customer_id=APIHelper.SKIP,
                 shipping=APIHelper.SKIP,
                 metadata=APIHelper.SKIP,
                 antifraud_enabled=APIHelper.SKIP,
                 ip=APIHelper.SKIP,
                 session_id=APIHelper.SKIP,
                 location=APIHelper.SKIP,
                 device=APIHelper.SKIP,
                 currency=APIHelper.SKIP,
                 antifraud=APIHelper.SKIP,
                 submerchant=APIHelper.SKIP):
        """Constructor for the CreateOrderRequest class"""

        # Initialize members of the class
        self.items = items 
        self.customer = customer 
        self.payments = payments 
        self.code = code 
        if customer_id is not APIHelper.SKIP:
            self.customer_id = customer_id 
        if shipping is not APIHelper.SKIP:
            self.shipping = shipping 
        if metadata is not APIHelper.SKIP:
            self.metadata = metadata 
        if antifraud_enabled is not APIHelper.SKIP:
            self.antifraud_enabled = antifraud_enabled 
        if ip is not APIHelper.SKIP:
            self.ip = ip 
        if session_id is not APIHelper.SKIP:
            self.session_id = session_id 
        if location is not APIHelper.SKIP:
            self.location = location 
        if device is not APIHelper.SKIP:
            self.device = device 
        self.closed = closed 
        if currency is not APIHelper.SKIP:
            self.currency = currency 
        if antifraud is not APIHelper.SKIP:
            self.antifraud = antifraud 
        if submerchant is not APIHelper.SKIP:
            self.submerchant = submerchant 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        items = None
        if dictionary.get('items') is not None:
            items = [CreateOrderItemRequest.from_dictionary(x) for x in dictionary.get('items')]
        customer = CreateCustomerRequest.from_dictionary(dictionary.get('customer')) if dictionary.get('customer') else None
        payments = None
        if dictionary.get('payments') is not None:
            payments = [CreatePaymentRequest.from_dictionary(x) for x in dictionary.get('payments')]
        code = dictionary.get("code") if dictionary.get("code") else None
        closed = dictionary.get("closed") if dictionary.get("closed") else True
        customer_id = dictionary.get("customer_id") if "customer_id" in dictionary.keys() else APIHelper.SKIP
        shipping = CreateShippingRequest.from_dictionary(dictionary.get('shipping')) if 'shipping' in dictionary.keys() else APIHelper.SKIP
        metadata = dictionary.get("metadata") if "metadata" in dictionary.keys() else APIHelper.SKIP
        antifraud_enabled = dictionary.get("antifraud_enabled") if "antifraud_enabled" in dictionary.keys() else APIHelper.SKIP
        ip = dictionary.get("ip") if dictionary.get("ip") else APIHelper.SKIP
        session_id = dictionary.get("session_id") if dictionary.get("session_id") else APIHelper.SKIP
        location = CreateLocationRequest.from_dictionary(dictionary.get('location')) if 'location' in dictionary.keys() else APIHelper.SKIP
        device = CreateDeviceRequest.from_dictionary(dictionary.get('device')) if 'device' in dictionary.keys() else APIHelper.SKIP
        currency = dictionary.get("currency") if dictionary.get("currency") else APIHelper.SKIP
        antifraud = CreateAntifraudRequest.from_dictionary(dictionary.get('antifraud')) if 'antifraud' in dictionary.keys() else APIHelper.SKIP
        submerchant = CreateSubMerchantRequest.from_dictionary(dictionary.get('submerchant')) if 'submerchant' in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(items,
                   customer,
                   payments,
                   code,
                   closed,
                   customer_id,
                   shipping,
                   metadata,
                   antifraud_enabled,
                   ip,
                   session_id,
                   location,
                   device,
                   currency,
                   antifraud,
                   submerchant)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'items={self.items!r}, '
                f'customer={self.customer!r}, '
                f'payments={self.payments!r}, '
                f'code={self.code!r}, '
                f'customer_id={(self.customer_id if hasattr(self, "customer_id") else None)!r}, '
                f'shipping={(self.shipping if hasattr(self, "shipping") else None)!r}, '
                f'metadata={(self.metadata if hasattr(self, "metadata") else None)!r}, '
                f'antifraud_enabled={(self.antifraud_enabled if hasattr(self, "antifraud_enabled") else None)!r}, '
                f'ip={(self.ip if hasattr(self, "ip") else None)!r}, '
                f'session_id={(self.session_id if hasattr(self, "session_id") else None)!r}, '
                f'location={(self.location if hasattr(self, "location") else None)!r}, '
                f'device={(self.device if hasattr(self, "device") else None)!r}, '
                f'closed={self.closed!r}, '
                f'currency={(self.currency if hasattr(self, "currency") else None)!r}, '
                f'antifraud={(self.antifraud if hasattr(self, "antifraud") else None)!r}, '
                f'submerchant={(self.submerchant if hasattr(self, "submerchant") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'items={self.items!s}, '
                f'customer={self.customer!s}, '
                f'payments={self.payments!s}, '
                f'code={self.code!s}, '
                f'customer_id={(self.customer_id if hasattr(self, "customer_id") else None)!s}, '
                f'shipping={(self.shipping if hasattr(self, "shipping") else None)!s}, '
                f'metadata={(self.metadata if hasattr(self, "metadata") else None)!s}, '
                f'antifraud_enabled={(self.antifraud_enabled if hasattr(self, "antifraud_enabled") else None)!s}, '
                f'ip={(self.ip if hasattr(self, "ip") else None)!s}, '
                f'session_id={(self.session_id if hasattr(self, "session_id") else None)!s}, '
                f'location={(self.location if hasattr(self, "location") else None)!s}, '
                f'device={(self.device if hasattr(self, "device") else None)!s}, '
                f'closed={self.closed!s}, '
                f'currency={(self.currency if hasattr(self, "currency") else None)!s}, '
                f'antifraud={(self.antifraud if hasattr(self, "antifraud") else None)!s}, '
                f'submerchant={(self.submerchant if hasattr(self, "submerchant") else None)!s})')

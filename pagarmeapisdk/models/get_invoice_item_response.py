# -*- coding: utf-8 -*-

"""
pagarmeapisdk

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pagarmeapisdk.api_helper import APIHelper
from pagarmeapisdk.models.get_price_bracket_response import GetPriceBracketResponse
from pagarmeapisdk.models.get_pricing_scheme_response import GetPricingSchemeResponse


class GetInvoiceItemResponse(object):

    """Implementation of the 'GetInvoiceItemResponse' model.

    Response object for getting an invoice item

    Attributes:
        amount (int): The model property of type int.
        description (str): The model property of type str.
        pricing_scheme (GetPricingSchemeResponse): The model property of type
            GetPricingSchemeResponse.
        price_bracket (GetPriceBracketResponse): The model property of type
            GetPriceBracketResponse.
        quantity (int): The model property of type int.
        name (str): The model property of type str.
        subscription_item_id (str): Subscription Item Id

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "amount": 'amount',
        "description": 'description',
        "pricing_scheme": 'pricing_scheme',
        "price_bracket": 'price_bracket',
        "quantity": 'quantity',
        "name": 'name',
        "subscription_item_id": 'subscription_item_id'
    }

    _optionals = [
        'amount',
        'description',
        'pricing_scheme',
        'price_bracket',
        'quantity',
        'name',
        'subscription_item_id',
    ]

    _nullables = [
        'amount',
        'description',
        'pricing_scheme',
        'price_bracket',
        'quantity',
        'name',
        'subscription_item_id',
    ]

    def __init__(self,
                 amount=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 pricing_scheme=APIHelper.SKIP,
                 price_bracket=APIHelper.SKIP,
                 quantity=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 subscription_item_id=APIHelper.SKIP):
        """Constructor for the GetInvoiceItemResponse class"""

        # Initialize members of the class
        if amount is not APIHelper.SKIP:
            self.amount = amount 
        if description is not APIHelper.SKIP:
            self.description = description 
        if pricing_scheme is not APIHelper.SKIP:
            self.pricing_scheme = pricing_scheme 
        if price_bracket is not APIHelper.SKIP:
            self.price_bracket = price_bracket 
        if quantity is not APIHelper.SKIP:
            self.quantity = quantity 
        if name is not APIHelper.SKIP:
            self.name = name 
        if subscription_item_id is not APIHelper.SKIP:
            self.subscription_item_id = subscription_item_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        amount = dictionary.get("amount") if "amount" in dictionary.keys() else APIHelper.SKIP
        description = dictionary.get("description") if "description" in dictionary.keys() else APIHelper.SKIP
        if 'pricing_scheme' in dictionary.keys():
            pricing_scheme = GetPricingSchemeResponse.from_dictionary(dictionary.get('pricing_scheme')) if dictionary.get('pricing_scheme') else None
        else:
            pricing_scheme = APIHelper.SKIP
        if 'price_bracket' in dictionary.keys():
            price_bracket = GetPriceBracketResponse.from_dictionary(dictionary.get('price_bracket')) if dictionary.get('price_bracket') else None
        else:
            price_bracket = APIHelper.SKIP
        quantity = dictionary.get("quantity") if "quantity" in dictionary.keys() else APIHelper.SKIP
        name = dictionary.get("name") if "name" in dictionary.keys() else APIHelper.SKIP
        subscription_item_id = dictionary.get("subscription_item_id") if "subscription_item_id" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(amount,
                   description,
                   pricing_scheme,
                   price_bracket,
                   quantity,
                   name,
                   subscription_item_id)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'amount={(self.amount if hasattr(self, "amount") else None)!r}, '
                f'description={(self.description if hasattr(self, "description") else None)!r}, '
                f'pricing_scheme={(self.pricing_scheme if hasattr(self, "pricing_scheme") else None)!r}, '
                f'price_bracket={(self.price_bracket if hasattr(self, "price_bracket") else None)!r}, '
                f'quantity={(self.quantity if hasattr(self, "quantity") else None)!r}, '
                f'name={(self.name if hasattr(self, "name") else None)!r}, '
                f'subscription_item_id={(self.subscription_item_id if hasattr(self, "subscription_item_id") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'amount={(self.amount if hasattr(self, "amount") else None)!s}, '
                f'description={(self.description if hasattr(self, "description") else None)!s}, '
                f'pricing_scheme={(self.pricing_scheme if hasattr(self, "pricing_scheme") else None)!s}, '
                f'price_bracket={(self.price_bracket if hasattr(self, "price_bracket") else None)!s}, '
                f'quantity={(self.quantity if hasattr(self, "quantity") else None)!s}, '
                f'name={(self.name if hasattr(self, "name") else None)!s}, '
                f'subscription_item_id={(self.subscription_item_id if hasattr(self, "subscription_item_id") else None)!s})')

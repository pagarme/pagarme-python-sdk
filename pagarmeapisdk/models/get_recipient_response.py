# -*- coding: utf-8 -*-

"""
pagarmeapisdk

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pagarmeapisdk.api_helper import APIHelper
from pagarmeapisdk.models.get_automatic_anticipation_response import GetAutomaticAnticipationResponse
from pagarmeapisdk.models.get_gateway_recipient_response import GetGatewayRecipientResponse
from pagarmeapisdk.models.get_register_information_response import GetRegisterInformationResponse
from pagarmeapisdk.models.get_transfer_settings_response import GetTransferSettingsResponse


class GetRecipientResponse(object):

    """Implementation of the 'GetRecipientResponse' model.

    Recipient response

    Attributes:
        id (str): Id
        name (str): Name
        email (str): Email
        document (str): Document
        description (str): Description
        mtype (str): Type
        status (str): Status
        created_at (datetime): Creation date
        updated_at (datetime): Last update date
        deleted_at (datetime): Deletion date
        default_bank_account (GetBankAccountResponse): Default bank account
        gateway_recipients (List[GetGatewayRecipientResponse]): Info about the
            recipient on the gateway
        metadata (Dict[str, str]): Metadata
        automatic_anticipation_settings (GetAutomaticAnticipationResponse):
            The model property of type GetAutomaticAnticipationResponse.
        transfer_settings (GetTransferSettingsResponse): The model property of
            type GetTransferSettingsResponse.
        code (str): Recipient code
        payment_mode (str): Payment mode
        register_information (GetRegisterInformationResponse): The model
            property of type GetRegisterInformationResponse.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "name": 'name',
        "email": 'email',
        "document": 'document',
        "description": 'description',
        "mtype": 'type',
        "status": 'status',
        "created_at": 'created_at',
        "updated_at": 'updated_at',
        "deleted_at": 'deleted_at',
        "default_bank_account": 'default_bank_account',
        "gateway_recipients": 'gateway_recipients',
        "metadata": 'metadata',
        "automatic_anticipation_settings": 'automatic_anticipation_settings',
        "transfer_settings": 'transfer_settings',
        "code": 'code',
        "payment_mode": 'payment_mode',
        "register_information": 'register_information'
    }

    _optionals = [
        'id',
        'name',
        'email',
        'document',
        'description',
        'mtype',
        'status',
        'created_at',
        'updated_at',
        'deleted_at',
        'default_bank_account',
        'gateway_recipients',
        'metadata',
        'automatic_anticipation_settings',
        'transfer_settings',
        'code',
        'payment_mode',
        'register_information',
    ]

    _nullables = [
        'id',
        'name',
        'email',
        'document',
        'description',
        'mtype',
        'status',
        'created_at',
        'updated_at',
        'deleted_at',
        'default_bank_account',
        'gateway_recipients',
        'metadata',
        'automatic_anticipation_settings',
        'transfer_settings',
        'code',
        'payment_mode',
        'register_information',
    ]

    def __init__(self,
                 id=APIHelper.SKIP,
                 name=APIHelper.SKIP,
                 email=APIHelper.SKIP,
                 document=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 mtype=APIHelper.SKIP,
                 status=APIHelper.SKIP,
                 created_at=APIHelper.SKIP,
                 updated_at=APIHelper.SKIP,
                 deleted_at=APIHelper.SKIP,
                 default_bank_account=APIHelper.SKIP,
                 gateway_recipients=APIHelper.SKIP,
                 metadata=APIHelper.SKIP,
                 automatic_anticipation_settings=APIHelper.SKIP,
                 transfer_settings=APIHelper.SKIP,
                 code=APIHelper.SKIP,
                 payment_mode='bank_transfer',
                 register_information=APIHelper.SKIP):
        """Constructor for the GetRecipientResponse class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        if name is not APIHelper.SKIP:
            self.name = name 
        if email is not APIHelper.SKIP:
            self.email = email 
        if document is not APIHelper.SKIP:
            self.document = document 
        if description is not APIHelper.SKIP:
            self.description = description 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        if status is not APIHelper.SKIP:
            self.status = status 
        if created_at is not APIHelper.SKIP:
            self.created_at = APIHelper.apply_datetime_converter(created_at, APIHelper.RFC3339DateTime) if created_at else None 
        if updated_at is not APIHelper.SKIP:
            self.updated_at = APIHelper.apply_datetime_converter(updated_at, APIHelper.RFC3339DateTime) if updated_at else None 
        if deleted_at is not APIHelper.SKIP:
            self.deleted_at = APIHelper.apply_datetime_converter(deleted_at, APIHelper.RFC3339DateTime) if deleted_at else None 
        if default_bank_account is not APIHelper.SKIP:
            self.default_bank_account = default_bank_account 
        if gateway_recipients is not APIHelper.SKIP:
            self.gateway_recipients = gateway_recipients 
        if metadata is not APIHelper.SKIP:
            self.metadata = metadata 
        if automatic_anticipation_settings is not APIHelper.SKIP:
            self.automatic_anticipation_settings = automatic_anticipation_settings 
        if transfer_settings is not APIHelper.SKIP:
            self.transfer_settings = transfer_settings 
        if code is not APIHelper.SKIP:
            self.code = code 
        self.payment_mode = payment_mode 
        if register_information is not APIHelper.SKIP:
            self.register_information = register_information 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        from pagarmeapisdk.models.get_bank_account_response import GetBankAccountResponse

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if "id" in dictionary.keys() else APIHelper.SKIP
        name = dictionary.get("name") if "name" in dictionary.keys() else APIHelper.SKIP
        email = dictionary.get("email") if "email" in dictionary.keys() else APIHelper.SKIP
        document = dictionary.get("document") if "document" in dictionary.keys() else APIHelper.SKIP
        description = dictionary.get("description") if "description" in dictionary.keys() else APIHelper.SKIP
        mtype = dictionary.get("type") if "type" in dictionary.keys() else APIHelper.SKIP
        status = dictionary.get("status") if "status" in dictionary.keys() else APIHelper.SKIP
        if 'created_at' in dictionary.keys():
            created_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("created_at")).datetime if dictionary.get("created_at") else None
        else:
            created_at = APIHelper.SKIP
        if 'updated_at' in dictionary.keys():
            updated_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("updated_at")).datetime if dictionary.get("updated_at") else None
        else:
            updated_at = APIHelper.SKIP
        if 'deleted_at' in dictionary.keys():
            deleted_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("deleted_at")).datetime if dictionary.get("deleted_at") else None
        else:
            deleted_at = APIHelper.SKIP
        if 'default_bank_account' in dictionary.keys():
            default_bank_account = GetBankAccountResponse.from_dictionary(dictionary.get('default_bank_account')) if dictionary.get('default_bank_account') else None
        else:
            default_bank_account = APIHelper.SKIP
        if 'gateway_recipients' in dictionary.keys():
            gateway_recipients = [GetGatewayRecipientResponse.from_dictionary(x) for x in dictionary.get('gateway_recipients')] if dictionary.get('gateway_recipients') else None
        else:
            gateway_recipients = APIHelper.SKIP
        metadata = dictionary.get("metadata") if "metadata" in dictionary.keys() else APIHelper.SKIP
        if 'automatic_anticipation_settings' in dictionary.keys():
            automatic_anticipation_settings = GetAutomaticAnticipationResponse.from_dictionary(dictionary.get('automatic_anticipation_settings')) if dictionary.get('automatic_anticipation_settings') else None
        else:
            automatic_anticipation_settings = APIHelper.SKIP
        if 'transfer_settings' in dictionary.keys():
            transfer_settings = GetTransferSettingsResponse.from_dictionary(dictionary.get('transfer_settings')) if dictionary.get('transfer_settings') else None
        else:
            transfer_settings = APIHelper.SKIP
        code = dictionary.get("code") if "code" in dictionary.keys() else APIHelper.SKIP
        payment_mode = dictionary.get("payment_mode") if dictionary.get("payment_mode") else 'bank_transfer'
        if 'register_information' in dictionary.keys():
            register_information = GetRegisterInformationResponse.from_dictionary(dictionary.get('register_information')) if dictionary.get('register_information') else None
        else:
            register_information = APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   name,
                   email,
                   document,
                   description,
                   mtype,
                   status,
                   created_at,
                   updated_at,
                   deleted_at,
                   default_bank_account,
                   gateway_recipients,
                   metadata,
                   automatic_anticipation_settings,
                   transfer_settings,
                   code,
                   payment_mode,
                   register_information)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'id={(self.id if hasattr(self, "id") else None)!r}, '
                f'name={(self.name if hasattr(self, "name") else None)!r}, '
                f'email={(self.email if hasattr(self, "email") else None)!r}, '
                f'document={(self.document if hasattr(self, "document") else None)!r}, '
                f'description={(self.description if hasattr(self, "description") else None)!r}, '
                f'mtype={(self.mtype if hasattr(self, "mtype") else None)!r}, '
                f'status={(self.status if hasattr(self, "status") else None)!r}, '
                f'created_at={(self.created_at if hasattr(self, "created_at") else None)!r}, '
                f'updated_at={(self.updated_at if hasattr(self, "updated_at") else None)!r}, '
                f'deleted_at={(self.deleted_at if hasattr(self, "deleted_at") else None)!r}, '
                f'default_bank_account={(self.default_bank_account if hasattr(self, "default_bank_account") else None)!r}, '
                f'gateway_recipients={(self.gateway_recipients if hasattr(self, "gateway_recipients") else None)!r}, '
                f'metadata={(self.metadata if hasattr(self, "metadata") else None)!r}, '
                f'automatic_anticipation_settings={(self.automatic_anticipation_settings if hasattr(self, "automatic_anticipation_settings") else None)!r}, '
                f'transfer_settings={(self.transfer_settings if hasattr(self, "transfer_settings") else None)!r}, '
                f'code={(self.code if hasattr(self, "code") else None)!r}, '
                f'payment_mode={(self.payment_mode if hasattr(self, "payment_mode") else None)!r}, '
                f'register_information={(self.register_information if hasattr(self, "register_information") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'id={(self.id if hasattr(self, "id") else None)!s}, '
                f'name={(self.name if hasattr(self, "name") else None)!s}, '
                f'email={(self.email if hasattr(self, "email") else None)!s}, '
                f'document={(self.document if hasattr(self, "document") else None)!s}, '
                f'description={(self.description if hasattr(self, "description") else None)!s}, '
                f'mtype={(self.mtype if hasattr(self, "mtype") else None)!s}, '
                f'status={(self.status if hasattr(self, "status") else None)!s}, '
                f'created_at={(self.created_at if hasattr(self, "created_at") else None)!s}, '
                f'updated_at={(self.updated_at if hasattr(self, "updated_at") else None)!s}, '
                f'deleted_at={(self.deleted_at if hasattr(self, "deleted_at") else None)!s}, '
                f'default_bank_account={(self.default_bank_account if hasattr(self, "default_bank_account") else None)!s}, '
                f'gateway_recipients={(self.gateway_recipients if hasattr(self, "gateway_recipients") else None)!s}, '
                f'metadata={(self.metadata if hasattr(self, "metadata") else None)!s}, '
                f'automatic_anticipation_settings={(self.automatic_anticipation_settings if hasattr(self, "automatic_anticipation_settings") else None)!s}, '
                f'transfer_settings={(self.transfer_settings if hasattr(self, "transfer_settings") else None)!s}, '
                f'code={(self.code if hasattr(self, "code") else None)!s}, '
                f'payment_mode={(self.payment_mode if hasattr(self, "payment_mode") else None)!s}, '
                f'register_information={(self.register_information if hasattr(self, "register_information") else None)!s})')

# -*- coding: utf-8 -*-

"""
pagarmeapisdk

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pagarmeapisdk.api_helper import APIHelper
from pagarmeapisdk.models.get_address_response import GetAddressResponse
from pagarmeapisdk.models.get_checkout_bank_transfer_payment_response import GetCheckoutBankTransferPaymentResponse
from pagarmeapisdk.models.get_checkout_boleto_payment_response import GetCheckoutBoletoPaymentResponse
from pagarmeapisdk.models.get_checkout_credit_card_payment_response import GetCheckoutCreditCardPaymentResponse
from pagarmeapisdk.models.get_checkout_debit_card_payment_response import GetCheckoutDebitCardPaymentResponse
from pagarmeapisdk.models.get_checkout_pix_payment_response import GetCheckoutPixPaymentResponse
from pagarmeapisdk.models.get_customer_response import GetCustomerResponse
from pagarmeapisdk.models.get_shipping_response import GetShippingResponse


class GetCheckoutPaymentResponse(object):

    """Implementation of the 'GetCheckoutPaymentResponse' model.

    Resposta das configurações de pagamento do checkout

    Attributes:
        id (str): The model property of type str.
        amount (int): Valor em centavos
        default_payment_method (str): Meio de pagamento padrão no checkout
        success_url (str): Url de redirecionamento de sucesso após o checkou
        payment_url (str): Url para pagamento usando o checkout
        gateway_affiliation_id (str): Código da afiliação onde o pagamento
            será processado no gateway
        accepted_payment_methods (List[str]): Meios de pagamento aceitos no
            checkout
        status (str): Status do checkout
        skip_checkout_success_page (bool): Pular tela de sucesso pós-pagamento?
        created_at (datetime): Data de criação
        updated_at (datetime): Data de atualização
        canceled_at (datetime): Data de cancelamento
        customer_editable (bool): Torna o objeto customer editável
        customer (GetCustomerResponse): Dados do comprador
        billingaddress (GetAddressResponse): Dados do endereço de cobrança
        credit_card (GetCheckoutCreditCardPaymentResponse): Configurações de
            cartão de crédito
        boleto (GetCheckoutBoletoPaymentResponse): Configurações de boleto
        billing_address_editable (bool): Indica se o billing address poderá
            ser editado
        shipping (GetShippingResponse): Configurações  de entrega
        shippable (bool): Indica se possui entrega
        closed_at (datetime): Data de fechamento
        expires_at (datetime): Data de expiração
        currency (str): Moeda
        debit_card (GetCheckoutDebitCardPaymentResponse): Configurações de
            cartão de débito
        bank_transfer (GetCheckoutBankTransferPaymentResponse): Bank transfer
            payment response
        accepted_brands (List[str]): Accepted Brands
        pix (GetCheckoutPixPaymentResponse): Pix payment response

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "amount": 'amount',
        "default_payment_method": 'default_payment_method',
        "success_url": 'success_url',
        "payment_url": 'payment_url',
        "gateway_affiliation_id": 'gateway_affiliation_id',
        "accepted_payment_methods": 'accepted_payment_methods',
        "status": 'status',
        "skip_checkout_success_page": 'skip_checkout_success_page',
        "created_at": 'created_at',
        "updated_at": 'updated_at',
        "canceled_at": 'canceled_at',
        "customer_editable": 'customer_editable',
        "customer": 'customer',
        "billingaddress": 'billingaddress',
        "credit_card": 'credit_card',
        "boleto": 'boleto',
        "billing_address_editable": 'billing_address_editable',
        "shipping": 'shipping',
        "shippable": 'shippable',
        "closed_at": 'closed_at',
        "expires_at": 'expires_at',
        "currency": 'currency',
        "debit_card": 'debit_card',
        "bank_transfer": 'bank_transfer',
        "accepted_brands": 'accepted_brands',
        "pix": 'pix'
    }

    _optionals = [
        'id',
        'amount',
        'default_payment_method',
        'success_url',
        'payment_url',
        'gateway_affiliation_id',
        'accepted_payment_methods',
        'status',
        'skip_checkout_success_page',
        'created_at',
        'updated_at',
        'canceled_at',
        'customer_editable',
        'customer',
        'billingaddress',
        'credit_card',
        'boleto',
        'billing_address_editable',
        'shipping',
        'shippable',
        'closed_at',
        'expires_at',
        'currency',
        'debit_card',
        'bank_transfer',
        'accepted_brands',
        'pix',
    ]

    _nullables = [
        'id',
        'amount',
        'default_payment_method',
        'success_url',
        'payment_url',
        'gateway_affiliation_id',
        'accepted_payment_methods',
        'status',
        'skip_checkout_success_page',
        'created_at',
        'updated_at',
        'canceled_at',
        'customer_editable',
        'customer',
        'billingaddress',
        'credit_card',
        'boleto',
        'billing_address_editable',
        'shipping',
        'shippable',
        'closed_at',
        'expires_at',
        'currency',
        'debit_card',
        'bank_transfer',
        'accepted_brands',
        'pix',
    ]

    def __init__(self,
                 id=APIHelper.SKIP,
                 amount=APIHelper.SKIP,
                 default_payment_method=APIHelper.SKIP,
                 success_url=APIHelper.SKIP,
                 payment_url=APIHelper.SKIP,
                 gateway_affiliation_id=APIHelper.SKIP,
                 accepted_payment_methods=APIHelper.SKIP,
                 status=APIHelper.SKIP,
                 skip_checkout_success_page=APIHelper.SKIP,
                 created_at=APIHelper.SKIP,
                 updated_at=APIHelper.SKIP,
                 canceled_at=APIHelper.SKIP,
                 customer_editable=APIHelper.SKIP,
                 customer=APIHelper.SKIP,
                 billingaddress=APIHelper.SKIP,
                 credit_card=APIHelper.SKIP,
                 boleto=APIHelper.SKIP,
                 billing_address_editable=APIHelper.SKIP,
                 shipping=APIHelper.SKIP,
                 shippable=APIHelper.SKIP,
                 closed_at=APIHelper.SKIP,
                 expires_at=APIHelper.SKIP,
                 currency=APIHelper.SKIP,
                 debit_card=APIHelper.SKIP,
                 bank_transfer=APIHelper.SKIP,
                 accepted_brands=APIHelper.SKIP,
                 pix=APIHelper.SKIP):
        """Constructor for the GetCheckoutPaymentResponse class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        if amount is not APIHelper.SKIP:
            self.amount = amount 
        if default_payment_method is not APIHelper.SKIP:
            self.default_payment_method = default_payment_method 
        if success_url is not APIHelper.SKIP:
            self.success_url = success_url 
        if payment_url is not APIHelper.SKIP:
            self.payment_url = payment_url 
        if gateway_affiliation_id is not APIHelper.SKIP:
            self.gateway_affiliation_id = gateway_affiliation_id 
        if accepted_payment_methods is not APIHelper.SKIP:
            self.accepted_payment_methods = accepted_payment_methods 
        if status is not APIHelper.SKIP:
            self.status = status 
        if skip_checkout_success_page is not APIHelper.SKIP:
            self.skip_checkout_success_page = skip_checkout_success_page 
        if created_at is not APIHelper.SKIP:
            self.created_at = APIHelper.apply_datetime_converter(created_at, APIHelper.RFC3339DateTime) if created_at else None 
        if updated_at is not APIHelper.SKIP:
            self.updated_at = APIHelper.apply_datetime_converter(updated_at, APIHelper.RFC3339DateTime) if updated_at else None 
        if canceled_at is not APIHelper.SKIP:
            self.canceled_at = APIHelper.apply_datetime_converter(canceled_at, APIHelper.RFC3339DateTime) if canceled_at else None 
        if customer_editable is not APIHelper.SKIP:
            self.customer_editable = customer_editable 
        if customer is not APIHelper.SKIP:
            self.customer = customer 
        if billingaddress is not APIHelper.SKIP:
            self.billingaddress = billingaddress 
        if credit_card is not APIHelper.SKIP:
            self.credit_card = credit_card 
        if boleto is not APIHelper.SKIP:
            self.boleto = boleto 
        if billing_address_editable is not APIHelper.SKIP:
            self.billing_address_editable = billing_address_editable 
        if shipping is not APIHelper.SKIP:
            self.shipping = shipping 
        if shippable is not APIHelper.SKIP:
            self.shippable = shippable 
        if closed_at is not APIHelper.SKIP:
            self.closed_at = APIHelper.apply_datetime_converter(closed_at, APIHelper.RFC3339DateTime) if closed_at else None 
        if expires_at is not APIHelper.SKIP:
            self.expires_at = APIHelper.apply_datetime_converter(expires_at, APIHelper.RFC3339DateTime) if expires_at else None 
        if currency is not APIHelper.SKIP:
            self.currency = currency 
        if debit_card is not APIHelper.SKIP:
            self.debit_card = debit_card 
        if bank_transfer is not APIHelper.SKIP:
            self.bank_transfer = bank_transfer 
        if accepted_brands is not APIHelper.SKIP:
            self.accepted_brands = accepted_brands 
        if pix is not APIHelper.SKIP:
            self.pix = pix 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if "id" in dictionary.keys() else APIHelper.SKIP
        amount = dictionary.get("amount") if "amount" in dictionary.keys() else APIHelper.SKIP
        default_payment_method = dictionary.get("default_payment_method") if "default_payment_method" in dictionary.keys() else APIHelper.SKIP
        success_url = dictionary.get("success_url") if "success_url" in dictionary.keys() else APIHelper.SKIP
        payment_url = dictionary.get("payment_url") if "payment_url" in dictionary.keys() else APIHelper.SKIP
        gateway_affiliation_id = dictionary.get("gateway_affiliation_id") if "gateway_affiliation_id" in dictionary.keys() else APIHelper.SKIP
        accepted_payment_methods = dictionary.get("accepted_payment_methods") if "accepted_payment_methods" in dictionary.keys() else APIHelper.SKIP
        status = dictionary.get("status") if "status" in dictionary.keys() else APIHelper.SKIP
        skip_checkout_success_page = dictionary.get("skip_checkout_success_page") if "skip_checkout_success_page" in dictionary.keys() else APIHelper.SKIP
        if 'created_at' in dictionary.keys():
            created_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("created_at")).datetime if dictionary.get("created_at") else None
        else:
            created_at = APIHelper.SKIP
        if 'updated_at' in dictionary.keys():
            updated_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("updated_at")).datetime if dictionary.get("updated_at") else None
        else:
            updated_at = APIHelper.SKIP
        if 'canceled_at' in dictionary.keys():
            canceled_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("canceled_at")).datetime if dictionary.get("canceled_at") else None
        else:
            canceled_at = APIHelper.SKIP
        customer_editable = dictionary.get("customer_editable") if "customer_editable" in dictionary.keys() else APIHelper.SKIP
        if 'customer' in dictionary.keys():
            customer = GetCustomerResponse.from_dictionary(dictionary.get('customer')) if dictionary.get('customer') else None
        else:
            customer = APIHelper.SKIP
        if 'billingaddress' in dictionary.keys():
            billingaddress = GetAddressResponse.from_dictionary(dictionary.get('billingaddress')) if dictionary.get('billingaddress') else None
        else:
            billingaddress = APIHelper.SKIP
        if 'credit_card' in dictionary.keys():
            credit_card = GetCheckoutCreditCardPaymentResponse.from_dictionary(dictionary.get('credit_card')) if dictionary.get('credit_card') else None
        else:
            credit_card = APIHelper.SKIP
        if 'boleto' in dictionary.keys():
            boleto = GetCheckoutBoletoPaymentResponse.from_dictionary(dictionary.get('boleto')) if dictionary.get('boleto') else None
        else:
            boleto = APIHelper.SKIP
        billing_address_editable = dictionary.get("billing_address_editable") if "billing_address_editable" in dictionary.keys() else APIHelper.SKIP
        if 'shipping' in dictionary.keys():
            shipping = GetShippingResponse.from_dictionary(dictionary.get('shipping')) if dictionary.get('shipping') else None
        else:
            shipping = APIHelper.SKIP
        shippable = dictionary.get("shippable") if "shippable" in dictionary.keys() else APIHelper.SKIP
        if 'closed_at' in dictionary.keys():
            closed_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("closed_at")).datetime if dictionary.get("closed_at") else None
        else:
            closed_at = APIHelper.SKIP
        if 'expires_at' in dictionary.keys():
            expires_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("expires_at")).datetime if dictionary.get("expires_at") else None
        else:
            expires_at = APIHelper.SKIP
        currency = dictionary.get("currency") if "currency" in dictionary.keys() else APIHelper.SKIP
        if 'debit_card' in dictionary.keys():
            debit_card = GetCheckoutDebitCardPaymentResponse.from_dictionary(dictionary.get('debit_card')) if dictionary.get('debit_card') else None
        else:
            debit_card = APIHelper.SKIP
        if 'bank_transfer' in dictionary.keys():
            bank_transfer = GetCheckoutBankTransferPaymentResponse.from_dictionary(dictionary.get('bank_transfer')) if dictionary.get('bank_transfer') else None
        else:
            bank_transfer = APIHelper.SKIP
        accepted_brands = dictionary.get("accepted_brands") if "accepted_brands" in dictionary.keys() else APIHelper.SKIP
        if 'pix' in dictionary.keys():
            pix = GetCheckoutPixPaymentResponse.from_dictionary(dictionary.get('pix')) if dictionary.get('pix') else None
        else:
            pix = APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   amount,
                   default_payment_method,
                   success_url,
                   payment_url,
                   gateway_affiliation_id,
                   accepted_payment_methods,
                   status,
                   skip_checkout_success_page,
                   created_at,
                   updated_at,
                   canceled_at,
                   customer_editable,
                   customer,
                   billingaddress,
                   credit_card,
                   boleto,
                   billing_address_editable,
                   shipping,
                   shippable,
                   closed_at,
                   expires_at,
                   currency,
                   debit_card,
                   bank_transfer,
                   accepted_brands,
                   pix)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'id={(self.id if hasattr(self, "id") else None)!r}, '
                f'amount={(self.amount if hasattr(self, "amount") else None)!r}, '
                f'default_payment_method={(self.default_payment_method if hasattr(self, "default_payment_method") else None)!r}, '
                f'success_url={(self.success_url if hasattr(self, "success_url") else None)!r}, '
                f'payment_url={(self.payment_url if hasattr(self, "payment_url") else None)!r}, '
                f'gateway_affiliation_id={(self.gateway_affiliation_id if hasattr(self, "gateway_affiliation_id") else None)!r}, '
                f'accepted_payment_methods={(self.accepted_payment_methods if hasattr(self, "accepted_payment_methods") else None)!r}, '
                f'status={(self.status if hasattr(self, "status") else None)!r}, '
                f'skip_checkout_success_page={(self.skip_checkout_success_page if hasattr(self, "skip_checkout_success_page") else None)!r}, '
                f'created_at={(self.created_at if hasattr(self, "created_at") else None)!r}, '
                f'updated_at={(self.updated_at if hasattr(self, "updated_at") else None)!r}, '
                f'canceled_at={(self.canceled_at if hasattr(self, "canceled_at") else None)!r}, '
                f'customer_editable={(self.customer_editable if hasattr(self, "customer_editable") else None)!r}, '
                f'customer={(self.customer if hasattr(self, "customer") else None)!r}, '
                f'billingaddress={(self.billingaddress if hasattr(self, "billingaddress") else None)!r}, '
                f'credit_card={(self.credit_card if hasattr(self, "credit_card") else None)!r}, '
                f'boleto={(self.boleto if hasattr(self, "boleto") else None)!r}, '
                f'billing_address_editable={(self.billing_address_editable if hasattr(self, "billing_address_editable") else None)!r}, '
                f'shipping={(self.shipping if hasattr(self, "shipping") else None)!r}, '
                f'shippable={(self.shippable if hasattr(self, "shippable") else None)!r}, '
                f'closed_at={(self.closed_at if hasattr(self, "closed_at") else None)!r}, '
                f'expires_at={(self.expires_at if hasattr(self, "expires_at") else None)!r}, '
                f'currency={(self.currency if hasattr(self, "currency") else None)!r}, '
                f'debit_card={(self.debit_card if hasattr(self, "debit_card") else None)!r}, '
                f'bank_transfer={(self.bank_transfer if hasattr(self, "bank_transfer") else None)!r}, '
                f'accepted_brands={(self.accepted_brands if hasattr(self, "accepted_brands") else None)!r}, '
                f'pix={(self.pix if hasattr(self, "pix") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'id={(self.id if hasattr(self, "id") else None)!s}, '
                f'amount={(self.amount if hasattr(self, "amount") else None)!s}, '
                f'default_payment_method={(self.default_payment_method if hasattr(self, "default_payment_method") else None)!s}, '
                f'success_url={(self.success_url if hasattr(self, "success_url") else None)!s}, '
                f'payment_url={(self.payment_url if hasattr(self, "payment_url") else None)!s}, '
                f'gateway_affiliation_id={(self.gateway_affiliation_id if hasattr(self, "gateway_affiliation_id") else None)!s}, '
                f'accepted_payment_methods={(self.accepted_payment_methods if hasattr(self, "accepted_payment_methods") else None)!s}, '
                f'status={(self.status if hasattr(self, "status") else None)!s}, '
                f'skip_checkout_success_page={(self.skip_checkout_success_page if hasattr(self, "skip_checkout_success_page") else None)!s}, '
                f'created_at={(self.created_at if hasattr(self, "created_at") else None)!s}, '
                f'updated_at={(self.updated_at if hasattr(self, "updated_at") else None)!s}, '
                f'canceled_at={(self.canceled_at if hasattr(self, "canceled_at") else None)!s}, '
                f'customer_editable={(self.customer_editable if hasattr(self, "customer_editable") else None)!s}, '
                f'customer={(self.customer if hasattr(self, "customer") else None)!s}, '
                f'billingaddress={(self.billingaddress if hasattr(self, "billingaddress") else None)!s}, '
                f'credit_card={(self.credit_card if hasattr(self, "credit_card") else None)!s}, '
                f'boleto={(self.boleto if hasattr(self, "boleto") else None)!s}, '
                f'billing_address_editable={(self.billing_address_editable if hasattr(self, "billing_address_editable") else None)!s}, '
                f'shipping={(self.shipping if hasattr(self, "shipping") else None)!s}, '
                f'shippable={(self.shippable if hasattr(self, "shippable") else None)!s}, '
                f'closed_at={(self.closed_at if hasattr(self, "closed_at") else None)!s}, '
                f'expires_at={(self.expires_at if hasattr(self, "expires_at") else None)!s}, '
                f'currency={(self.currency if hasattr(self, "currency") else None)!s}, '
                f'debit_card={(self.debit_card if hasattr(self, "debit_card") else None)!s}, '
                f'bank_transfer={(self.bank_transfer if hasattr(self, "bank_transfer") else None)!s}, '
                f'accepted_brands={(self.accepted_brands if hasattr(self, "accepted_brands") else None)!s}, '
                f'pix={(self.pix if hasattr(self, "pix") else None)!s})')

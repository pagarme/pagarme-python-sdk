# -*- coding: utf-8 -*-

"""
pagarmeapisdk

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pagarmeapisdk.api_helper import APIHelper
from pagarmeapisdk.models.get_split_response import GetSplitResponse


class GetSubscriptionSplitResponse(object):

    """Implementation of the 'GetSubscriptionSplitResponse' model.

    Attributes:
        enabled (bool): Defines if the split is enabled
        rules (List[GetSplitResponse]): Split

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "enabled": 'enabled',
        "rules": 'rules'
    }

    _optionals = [
        'enabled',
        'rules',
    ]

    _nullables = [
        'enabled',
        'rules',
    ]

    def __init__(self,
                 enabled=APIHelper.SKIP,
                 rules=APIHelper.SKIP):
        """Constructor for the GetSubscriptionSplitResponse class"""

        # Initialize members of the class
        if enabled is not APIHelper.SKIP:
            self.enabled = enabled 
        if rules is not APIHelper.SKIP:
            self.rules = rules 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        enabled = dictionary.get("enabled") if "enabled" in dictionary.keys() else APIHelper.SKIP
        if 'rules' in dictionary.keys():
            rules = [GetSplitResponse.from_dictionary(x) for x in dictionary.get('rules')] if dictionary.get('rules') else None
        else:
            rules = APIHelper.SKIP
        # Return an object of this model
        return cls(enabled,
                   rules)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'enabled={(self.enabled if hasattr(self, "enabled") else None)!r}, '
                f'rules={(self.rules if hasattr(self, "rules") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'enabled={(self.enabled if hasattr(self, "enabled") else None)!s}, '
                f'rules={(self.rules if hasattr(self, "rules") else None)!s})')

# -*- coding: utf-8 -*-

"""
pagarmeapisdk

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pagarmeapisdk.api_helper import APIHelper
from pagarmeapisdk.models.get_pix_bank_account_response import GetPixBankAccountResponse


class GetPixPayerResponse(object):

    """Implementation of the 'GetPixPayerResponse' model.

    Pix payer data.

    Attributes:
        name (str): The model property of type str.
        document (str): The model property of type str.
        document_type (str): The model property of type str.
        bank_account (GetPixBankAccountResponse): The model property of type
            GetPixBankAccountResponse.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "name": 'name',
        "document": 'document',
        "document_type": 'document_type',
        "bank_account": 'bank_account'
    }

    _optionals = [
        'name',
        'document',
        'document_type',
        'bank_account',
    ]

    _nullables = [
        'name',
        'document',
        'document_type',
        'bank_account',
    ]

    def __init__(self,
                 name=APIHelper.SKIP,
                 document=APIHelper.SKIP,
                 document_type=APIHelper.SKIP,
                 bank_account=APIHelper.SKIP):
        """Constructor for the GetPixPayerResponse class"""

        # Initialize members of the class
        if name is not APIHelper.SKIP:
            self.name = name 
        if document is not APIHelper.SKIP:
            self.document = document 
        if document_type is not APIHelper.SKIP:
            self.document_type = document_type 
        if bank_account is not APIHelper.SKIP:
            self.bank_account = bank_account 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        name = dictionary.get("name") if "name" in dictionary.keys() else APIHelper.SKIP
        document = dictionary.get("document") if "document" in dictionary.keys() else APIHelper.SKIP
        document_type = dictionary.get("document_type") if "document_type" in dictionary.keys() else APIHelper.SKIP
        if 'bank_account' in dictionary.keys():
            bank_account = GetPixBankAccountResponse.from_dictionary(dictionary.get('bank_account')) if dictionary.get('bank_account') else None
        else:
            bank_account = APIHelper.SKIP
        # Return an object of this model
        return cls(name,
                   document,
                   document_type,
                   bank_account)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'name={(self.name if hasattr(self, "name") else None)!r}, '
                f'document={(self.document if hasattr(self, "document") else None)!r}, '
                f'document_type={(self.document_type if hasattr(self, "document_type") else None)!r}, '
                f'bank_account={(self.bank_account if hasattr(self, "bank_account") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'name={(self.name if hasattr(self, "name") else None)!s}, '
                f'document={(self.document if hasattr(self, "document") else None)!s}, '
                f'document_type={(self.document_type if hasattr(self, "document_type") else None)!s}, '
                f'bank_account={(self.bank_account if hasattr(self, "bank_account") else None)!s})')

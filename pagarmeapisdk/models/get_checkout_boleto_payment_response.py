# -*- coding: utf-8 -*-

"""
pagarmeapisdk

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pagarmeapisdk.api_helper import APIHelper


class GetCheckoutBoletoPaymentResponse(object):

    """Implementation of the 'GetCheckoutBoletoPaymentResponse' model.

    Attributes:
        due_at (datetime): Data de vencimento do boleto
        instructions (str): Instruções do boleto

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "due_at": 'due_at',
        "instructions": 'instructions'
    }

    _optionals = [
        'due_at',
        'instructions',
    ]

    _nullables = [
        'due_at',
        'instructions',
    ]

    def __init__(self,
                 due_at=APIHelper.SKIP,
                 instructions=APIHelper.SKIP):
        """Constructor for the GetCheckoutBoletoPaymentResponse class"""

        # Initialize members of the class
        if due_at is not APIHelper.SKIP:
            self.due_at = APIHelper.apply_datetime_converter(due_at, APIHelper.RFC3339DateTime) if due_at else None 
        if instructions is not APIHelper.SKIP:
            self.instructions = instructions 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        if 'due_at' in dictionary.keys():
            due_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("due_at")).datetime if dictionary.get("due_at") else None
        else:
            due_at = APIHelper.SKIP
        instructions = dictionary.get("instructions") if "instructions" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(due_at,
                   instructions)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'due_at={(self.due_at if hasattr(self, "due_at") else None)!r}, '
                f'instructions={(self.instructions if hasattr(self, "instructions") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'due_at={(self.due_at if hasattr(self, "due_at") else None)!s}, '
                f'instructions={(self.instructions if hasattr(self, "instructions") else None)!s})')

# -*- coding: utf-8 -*-

"""
pagarmeapisdk

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pagarmeapisdk.api_helper import APIHelper
from pagarmeapisdk.models.get_billing_address_response import GetBillingAddressResponse
from pagarmeapisdk.models.get_customer_response import GetCustomerResponse
from pagarmeapisdk.models.get_invoice_item_response import GetInvoiceItemResponse
from pagarmeapisdk.models.get_period_response import GetPeriodResponse
from pagarmeapisdk.models.get_shipping_response import GetShippingResponse
from pagarmeapisdk.models.get_subscription_response import GetSubscriptionResponse


class GetInvoiceResponse(object):

    """Implementation of the 'GetInvoiceResponse' model.

    Response object for getting an invoice

    Attributes:
        id (str): The model property of type str.
        code (str): The model property of type str.
        url (str): The model property of type str.
        amount (int): The model property of type int.
        status (str): The model property of type str.
        payment_method (str): The model property of type str.
        created_at (datetime): The model property of type datetime.
        items (List[GetInvoiceItemResponse]): The model property of type
            List[GetInvoiceItemResponse].
        customer (GetCustomerResponse): The model property of type
            GetCustomerResponse.
        charge (GetChargeResponse): The model property of type
            GetChargeResponse.
        installments (int): The model property of type int.
        billing_address (GetBillingAddressResponse): The model property of
            type GetBillingAddressResponse.
        subscription (GetSubscriptionResponse): The model property of type
            GetSubscriptionResponse.
        cycle (GetPeriodResponse): The model property of type
            GetPeriodResponse.
        shipping (GetShippingResponse): The model property of type
            GetShippingResponse.
        metadata (Dict[str, str]): The model property of type Dict[str, str].
        due_at (datetime): The model property of type datetime.
        canceled_at (datetime): The model property of type datetime.
        billing_at (datetime): The model property of type datetime.
        seen_at (datetime): The model property of type datetime.
        total_discount (int): Total discounted value
        total_increment (int): Total discounted value
        subscription_id (str): Subscription Id

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "code": 'code',
        "url": 'url',
        "amount": 'amount',
        "status": 'status',
        "payment_method": 'payment_method',
        "created_at": 'created_at',
        "items": 'items',
        "customer": 'customer',
        "charge": 'charge',
        "installments": 'installments',
        "billing_address": 'billing_address',
        "subscription": 'subscription',
        "cycle": 'cycle',
        "shipping": 'shipping',
        "metadata": 'metadata',
        "due_at": 'due_at',
        "canceled_at": 'canceled_at',
        "billing_at": 'billing_at',
        "seen_at": 'seen_at',
        "total_discount": 'total_discount',
        "total_increment": 'total_increment',
        "subscription_id": 'subscription_id'
    }

    _optionals = [
        'id',
        'code',
        'url',
        'amount',
        'status',
        'payment_method',
        'created_at',
        'items',
        'customer',
        'charge',
        'installments',
        'billing_address',
        'subscription',
        'cycle',
        'shipping',
        'metadata',
        'due_at',
        'canceled_at',
        'billing_at',
        'seen_at',
        'total_discount',
        'total_increment',
        'subscription_id',
    ]

    _nullables = [
        'id',
        'code',
        'url',
        'amount',
        'status',
        'payment_method',
        'created_at',
        'items',
        'customer',
        'charge',
        'installments',
        'billing_address',
        'subscription',
        'cycle',
        'shipping',
        'metadata',
        'due_at',
        'canceled_at',
        'billing_at',
        'seen_at',
        'total_discount',
        'total_increment',
        'subscription_id',
    ]

    def __init__(self,
                 id=APIHelper.SKIP,
                 code=APIHelper.SKIP,
                 url=APIHelper.SKIP,
                 amount=APIHelper.SKIP,
                 status=APIHelper.SKIP,
                 payment_method=APIHelper.SKIP,
                 created_at=APIHelper.SKIP,
                 items=APIHelper.SKIP,
                 customer=APIHelper.SKIP,
                 charge=APIHelper.SKIP,
                 installments=APIHelper.SKIP,
                 billing_address=APIHelper.SKIP,
                 subscription=APIHelper.SKIP,
                 cycle=APIHelper.SKIP,
                 shipping=APIHelper.SKIP,
                 metadata=APIHelper.SKIP,
                 due_at=APIHelper.SKIP,
                 canceled_at=APIHelper.SKIP,
                 billing_at=APIHelper.SKIP,
                 seen_at=APIHelper.SKIP,
                 total_discount=APIHelper.SKIP,
                 total_increment=APIHelper.SKIP,
                 subscription_id=APIHelper.SKIP):
        """Constructor for the GetInvoiceResponse class"""

        # Initialize members of the class
        if id is not APIHelper.SKIP:
            self.id = id 
        if code is not APIHelper.SKIP:
            self.code = code 
        if url is not APIHelper.SKIP:
            self.url = url 
        if amount is not APIHelper.SKIP:
            self.amount = amount 
        if status is not APIHelper.SKIP:
            self.status = status 
        if payment_method is not APIHelper.SKIP:
            self.payment_method = payment_method 
        if created_at is not APIHelper.SKIP:
            self.created_at = APIHelper.apply_datetime_converter(created_at, APIHelper.RFC3339DateTime) if created_at else None 
        if items is not APIHelper.SKIP:
            self.items = items 
        if customer is not APIHelper.SKIP:
            self.customer = customer 
        if charge is not APIHelper.SKIP:
            self.charge = charge 
        if installments is not APIHelper.SKIP:
            self.installments = installments 
        if billing_address is not APIHelper.SKIP:
            self.billing_address = billing_address 
        if subscription is not APIHelper.SKIP:
            self.subscription = subscription 
        if cycle is not APIHelper.SKIP:
            self.cycle = cycle 
        if shipping is not APIHelper.SKIP:
            self.shipping = shipping 
        if metadata is not APIHelper.SKIP:
            self.metadata = metadata 
        if due_at is not APIHelper.SKIP:
            self.due_at = APIHelper.apply_datetime_converter(due_at, APIHelper.RFC3339DateTime) if due_at else None 
        if canceled_at is not APIHelper.SKIP:
            self.canceled_at = APIHelper.apply_datetime_converter(canceled_at, APIHelper.RFC3339DateTime) if canceled_at else None 
        if billing_at is not APIHelper.SKIP:
            self.billing_at = APIHelper.apply_datetime_converter(billing_at, APIHelper.RFC3339DateTime) if billing_at else None 
        if seen_at is not APIHelper.SKIP:
            self.seen_at = APIHelper.apply_datetime_converter(seen_at, APIHelper.RFC3339DateTime) if seen_at else None 
        if total_discount is not APIHelper.SKIP:
            self.total_discount = total_discount 
        if total_increment is not APIHelper.SKIP:
            self.total_increment = total_increment 
        if subscription_id is not APIHelper.SKIP:
            self.subscription_id = subscription_id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        from pagarmeapisdk.models.get_charge_response import GetChargeResponse

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if "id" in dictionary.keys() else APIHelper.SKIP
        code = dictionary.get("code") if "code" in dictionary.keys() else APIHelper.SKIP
        url = dictionary.get("url") if "url" in dictionary.keys() else APIHelper.SKIP
        amount = dictionary.get("amount") if "amount" in dictionary.keys() else APIHelper.SKIP
        status = dictionary.get("status") if "status" in dictionary.keys() else APIHelper.SKIP
        payment_method = dictionary.get("payment_method") if "payment_method" in dictionary.keys() else APIHelper.SKIP
        if 'created_at' in dictionary.keys():
            created_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("created_at")).datetime if dictionary.get("created_at") else None
        else:
            created_at = APIHelper.SKIP
        if 'items' in dictionary.keys():
            items = [GetInvoiceItemResponse.from_dictionary(x) for x in dictionary.get('items')] if dictionary.get('items') else None
        else:
            items = APIHelper.SKIP
        if 'customer' in dictionary.keys():
            customer = GetCustomerResponse.from_dictionary(dictionary.get('customer')) if dictionary.get('customer') else None
        else:
            customer = APIHelper.SKIP
        if 'charge' in dictionary.keys():
            charge = GetChargeResponse.from_dictionary(dictionary.get('charge')) if dictionary.get('charge') else None
        else:
            charge = APIHelper.SKIP
        installments = dictionary.get("installments") if "installments" in dictionary.keys() else APIHelper.SKIP
        if 'billing_address' in dictionary.keys():
            billing_address = GetBillingAddressResponse.from_dictionary(dictionary.get('billing_address')) if dictionary.get('billing_address') else None
        else:
            billing_address = APIHelper.SKIP
        if 'subscription' in dictionary.keys():
            subscription = GetSubscriptionResponse.from_dictionary(dictionary.get('subscription')) if dictionary.get('subscription') else None
        else:
            subscription = APIHelper.SKIP
        if 'cycle' in dictionary.keys():
            cycle = GetPeriodResponse.from_dictionary(dictionary.get('cycle')) if dictionary.get('cycle') else None
        else:
            cycle = APIHelper.SKIP
        if 'shipping' in dictionary.keys():
            shipping = GetShippingResponse.from_dictionary(dictionary.get('shipping')) if dictionary.get('shipping') else None
        else:
            shipping = APIHelper.SKIP
        metadata = dictionary.get("metadata") if "metadata" in dictionary.keys() else APIHelper.SKIP
        if 'due_at' in dictionary.keys():
            due_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("due_at")).datetime if dictionary.get("due_at") else None
        else:
            due_at = APIHelper.SKIP
        if 'canceled_at' in dictionary.keys():
            canceled_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("canceled_at")).datetime if dictionary.get("canceled_at") else None
        else:
            canceled_at = APIHelper.SKIP
        if 'billing_at' in dictionary.keys():
            billing_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("billing_at")).datetime if dictionary.get("billing_at") else None
        else:
            billing_at = APIHelper.SKIP
        if 'seen_at' in dictionary.keys():
            seen_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("seen_at")).datetime if dictionary.get("seen_at") else None
        else:
            seen_at = APIHelper.SKIP
        total_discount = dictionary.get("total_discount") if "total_discount" in dictionary.keys() else APIHelper.SKIP
        total_increment = dictionary.get("total_increment") if "total_increment" in dictionary.keys() else APIHelper.SKIP
        subscription_id = dictionary.get("subscription_id") if "subscription_id" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   code,
                   url,
                   amount,
                   status,
                   payment_method,
                   created_at,
                   items,
                   customer,
                   charge,
                   installments,
                   billing_address,
                   subscription,
                   cycle,
                   shipping,
                   metadata,
                   due_at,
                   canceled_at,
                   billing_at,
                   seen_at,
                   total_discount,
                   total_increment,
                   subscription_id)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'id={(self.id if hasattr(self, "id") else None)!r}, '
                f'code={(self.code if hasattr(self, "code") else None)!r}, '
                f'url={(self.url if hasattr(self, "url") else None)!r}, '
                f'amount={(self.amount if hasattr(self, "amount") else None)!r}, '
                f'status={(self.status if hasattr(self, "status") else None)!r}, '
                f'payment_method={(self.payment_method if hasattr(self, "payment_method") else None)!r}, '
                f'created_at={(self.created_at if hasattr(self, "created_at") else None)!r}, '
                f'items={(self.items if hasattr(self, "items") else None)!r}, '
                f'customer={(self.customer if hasattr(self, "customer") else None)!r}, '
                f'charge={(self.charge if hasattr(self, "charge") else None)!r}, '
                f'installments={(self.installments if hasattr(self, "installments") else None)!r}, '
                f'billing_address={(self.billing_address if hasattr(self, "billing_address") else None)!r}, '
                f'subscription={(self.subscription if hasattr(self, "subscription") else None)!r}, '
                f'cycle={(self.cycle if hasattr(self, "cycle") else None)!r}, '
                f'shipping={(self.shipping if hasattr(self, "shipping") else None)!r}, '
                f'metadata={(self.metadata if hasattr(self, "metadata") else None)!r}, '
                f'due_at={(self.due_at if hasattr(self, "due_at") else None)!r}, '
                f'canceled_at={(self.canceled_at if hasattr(self, "canceled_at") else None)!r}, '
                f'billing_at={(self.billing_at if hasattr(self, "billing_at") else None)!r}, '
                f'seen_at={(self.seen_at if hasattr(self, "seen_at") else None)!r}, '
                f'total_discount={(self.total_discount if hasattr(self, "total_discount") else None)!r}, '
                f'total_increment={(self.total_increment if hasattr(self, "total_increment") else None)!r}, '
                f'subscription_id={(self.subscription_id if hasattr(self, "subscription_id") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'id={(self.id if hasattr(self, "id") else None)!s}, '
                f'code={(self.code if hasattr(self, "code") else None)!s}, '
                f'url={(self.url if hasattr(self, "url") else None)!s}, '
                f'amount={(self.amount if hasattr(self, "amount") else None)!s}, '
                f'status={(self.status if hasattr(self, "status") else None)!s}, '
                f'payment_method={(self.payment_method if hasattr(self, "payment_method") else None)!s}, '
                f'created_at={(self.created_at if hasattr(self, "created_at") else None)!s}, '
                f'items={(self.items if hasattr(self, "items") else None)!s}, '
                f'customer={(self.customer if hasattr(self, "customer") else None)!s}, '
                f'charge={(self.charge if hasattr(self, "charge") else None)!s}, '
                f'installments={(self.installments if hasattr(self, "installments") else None)!s}, '
                f'billing_address={(self.billing_address if hasattr(self, "billing_address") else None)!s}, '
                f'subscription={(self.subscription if hasattr(self, "subscription") else None)!s}, '
                f'cycle={(self.cycle if hasattr(self, "cycle") else None)!s}, '
                f'shipping={(self.shipping if hasattr(self, "shipping") else None)!s}, '
                f'metadata={(self.metadata if hasattr(self, "metadata") else None)!s}, '
                f'due_at={(self.due_at if hasattr(self, "due_at") else None)!s}, '
                f'canceled_at={(self.canceled_at if hasattr(self, "canceled_at") else None)!s}, '
                f'billing_at={(self.billing_at if hasattr(self, "billing_at") else None)!s}, '
                f'seen_at={(self.seen_at if hasattr(self, "seen_at") else None)!s}, '
                f'total_discount={(self.total_discount if hasattr(self, "total_discount") else None)!s}, '
                f'total_increment={(self.total_increment if hasattr(self, "total_increment") else None)!s}, '
                f'subscription_id={(self.subscription_id if hasattr(self, "subscription_id") else None)!s})')

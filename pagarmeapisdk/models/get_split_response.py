# -*- coding: utf-8 -*-

"""
pagarmeapisdk

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pagarmeapisdk.api_helper import APIHelper
from pagarmeapisdk.models.get_recipient_response import GetRecipientResponse
from pagarmeapisdk.models.get_split_options_response import GetSplitOptionsResponse


class GetSplitResponse(object):

    """Implementation of the 'GetSplitResponse' model.

    Split response

    Attributes:
        mtype (str): Type
        amount (int): Amount
        recipient (GetRecipientResponse): Recipient
        gateway_id (str): The split rule gateway id
        options (GetSplitOptionsResponse): The model property of type
            GetSplitOptionsResponse.
        id (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "mtype": 'type',
        "amount": 'amount',
        "recipient": 'recipient',
        "gateway_id": 'gateway_id',
        "options": 'options',
        "id": 'id'
    }

    _optionals = [
        'mtype',
        'amount',
        'recipient',
        'gateway_id',
        'options',
        'id',
    ]

    _nullables = [
        'mtype',
        'amount',
        'recipient',
        'gateway_id',
        'options',
        'id',
    ]

    def __init__(self,
                 mtype=APIHelper.SKIP,
                 amount=APIHelper.SKIP,
                 recipient=APIHelper.SKIP,
                 gateway_id=APIHelper.SKIP,
                 options=APIHelper.SKIP,
                 id=APIHelper.SKIP):
        """Constructor for the GetSplitResponse class"""

        # Initialize members of the class
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        if amount is not APIHelper.SKIP:
            self.amount = amount 
        if recipient is not APIHelper.SKIP:
            self.recipient = recipient 
        if gateway_id is not APIHelper.SKIP:
            self.gateway_id = gateway_id 
        if options is not APIHelper.SKIP:
            self.options = options 
        if id is not APIHelper.SKIP:
            self.id = id 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        mtype = dictionary.get("type") if "type" in dictionary.keys() else APIHelper.SKIP
        amount = dictionary.get("amount") if "amount" in dictionary.keys() else APIHelper.SKIP
        if 'recipient' in dictionary.keys():
            recipient = GetRecipientResponse.from_dictionary(dictionary.get('recipient')) if dictionary.get('recipient') else None
        else:
            recipient = APIHelper.SKIP
        gateway_id = dictionary.get("gateway_id") if "gateway_id" in dictionary.keys() else APIHelper.SKIP
        if 'options' in dictionary.keys():
            options = GetSplitOptionsResponse.from_dictionary(dictionary.get('options')) if dictionary.get('options') else None
        else:
            options = APIHelper.SKIP
        id = dictionary.get("id") if "id" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(mtype,
                   amount,
                   recipient,
                   gateway_id,
                   options,
                   id)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'mtype={(self.mtype if hasattr(self, "mtype") else None)!r}, '
                f'amount={(self.amount if hasattr(self, "amount") else None)!r}, '
                f'recipient={(self.recipient if hasattr(self, "recipient") else None)!r}, '
                f'gateway_id={(self.gateway_id if hasattr(self, "gateway_id") else None)!r}, '
                f'options={(self.options if hasattr(self, "options") else None)!r}, '
                f'id={(self.id if hasattr(self, "id") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'mtype={(self.mtype if hasattr(self, "mtype") else None)!s}, '
                f'amount={(self.amount if hasattr(self, "amount") else None)!s}, '
                f'recipient={(self.recipient if hasattr(self, "recipient") else None)!s}, '
                f'gateway_id={(self.gateway_id if hasattr(self, "gateway_id") else None)!s}, '
                f'options={(self.options if hasattr(self, "options") else None)!s}, '
                f'id={(self.id if hasattr(self, "id") else None)!s})')

# -*- coding: utf-8 -*-

"""
pagarmeapisdk

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pagarmeapisdk.api_helper import APIHelper
from pagarmeapisdk.models.create_card_request import CreateCardRequest
from pagarmeapisdk.models.create_customer_request import CreateCustomerRequest
from pagarmeapisdk.models.create_discount_request import CreateDiscountRequest
from pagarmeapisdk.models.create_increment_request import CreateIncrementRequest
from pagarmeapisdk.models.create_period_request import CreatePeriodRequest
from pagarmeapisdk.models.create_pricing_scheme_request import CreatePricingSchemeRequest
from pagarmeapisdk.models.create_setup_request import CreateSetupRequest
from pagarmeapisdk.models.create_shipping_request import CreateShippingRequest
from pagarmeapisdk.models.create_sub_merchant_request import CreateSubMerchantRequest
from pagarmeapisdk.models.create_subscription_boleto_request import CreateSubscriptionBoletoRequest
from pagarmeapisdk.models.create_subscription_item_request import CreateSubscriptionItemRequest
from pagarmeapisdk.models.create_subscription_split_request import CreateSubscriptionSplitRequest


class CreateSubscriptionRequest(object):

    """Implementation of the 'CreateSubscriptionRequest' model.

    Request for creating a subcription

    Attributes:
        customer (CreateCustomerRequest): Customer
        card (CreateCardRequest): Card
        code (str): Subscription code
        payment_method (str): Payment method
        billing_type (str): Billing type
        statement_descriptor (str): Statement descriptor for credit card
            subscriptions
        description (str): Subscription description
        currency (str): Currency
        interval (str): Interval
        interval_count (int): Interval count
        pricing_scheme (CreatePricingSchemeRequest): Subscription pricing
            scheme
        items (List[CreateSubscriptionItemRequest]): Subscription items
        shipping (CreateShippingRequest): Shipping
        discounts (List[CreateDiscountRequest]): Discounts
        metadata (Dict[str, str]): Metadata
        setup (CreateSetupRequest): Setup data
        plan_id (str): Plan id
        customer_id (str): Customer id
        card_id (str): Card id
        billing_day (int): Billing day
        installments (int): Number of installments
        start_at (datetime): Subscription start date
        minimum_price (int): Subscription minimum price
        cycles (int): Number of cycles
        card_token (str): Card token
        gateway_affiliation_id (str): Gateway Affiliation code
        quantity (int): Quantity
        boleto_due_days (int): Days until boleto expires
        increments (List[CreateIncrementRequest]): Increments
        period (CreatePeriodRequest): The model property of type
            CreatePeriodRequest.
        submerchant (CreateSubMerchantRequest): SubMerchant
        split (CreateSubscriptionSplitRequest): Subscription's split
        boleto (CreateSubscriptionBoletoRequest): Information about fines and
            interest on the "boleto" used from payment
        indirect_acceptor (str): Business model identifier

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "customer": 'customer',
        "card": 'card',
        "code": 'code',
        "payment_method": 'payment_method',
        "billing_type": 'billing_type',
        "statement_descriptor": 'statement_descriptor',
        "description": 'description',
        "currency": 'currency',
        "interval": 'interval',
        "interval_count": 'interval_count',
        "pricing_scheme": 'pricing_scheme',
        "items": 'items',
        "shipping": 'shipping',
        "discounts": 'discounts',
        "metadata": 'metadata',
        "increments": 'increments',
        "setup": 'setup',
        "plan_id": 'plan_id',
        "customer_id": 'customer_id',
        "card_id": 'card_id',
        "billing_day": 'billing_day',
        "installments": 'installments',
        "start_at": 'start_at',
        "minimum_price": 'minimum_price',
        "cycles": 'cycles',
        "card_token": 'card_token',
        "gateway_affiliation_id": 'gateway_affiliation_id',
        "quantity": 'quantity',
        "boleto_due_days": 'boleto_due_days',
        "period": 'period',
        "submerchant": 'submerchant',
        "split": 'split',
        "boleto": 'boleto',
        "indirect_acceptor": 'indirect_acceptor'
    }

    _optionals = [
        'setup',
        'plan_id',
        'customer_id',
        'card_id',
        'billing_day',
        'installments',
        'start_at',
        'minimum_price',
        'cycles',
        'card_token',
        'gateway_affiliation_id',
        'quantity',
        'boleto_due_days',
        'period',
        'submerchant',
        'split',
        'boleto',
        'indirect_acceptor',
    ]

    def __init__(self,
                 customer=None,
                 card=None,
                 code=None,
                 payment_method=None,
                 billing_type=None,
                 statement_descriptor=None,
                 description=None,
                 currency=None,
                 interval=None,
                 interval_count=None,
                 pricing_scheme=None,
                 items=None,
                 shipping=None,
                 discounts=None,
                 metadata=None,
                 increments=None,
                 setup=APIHelper.SKIP,
                 plan_id=APIHelper.SKIP,
                 customer_id=APIHelper.SKIP,
                 card_id=APIHelper.SKIP,
                 billing_day=APIHelper.SKIP,
                 installments=APIHelper.SKIP,
                 start_at=APIHelper.SKIP,
                 minimum_price=APIHelper.SKIP,
                 cycles=APIHelper.SKIP,
                 card_token=APIHelper.SKIP,
                 gateway_affiliation_id=APIHelper.SKIP,
                 quantity=APIHelper.SKIP,
                 boleto_due_days=APIHelper.SKIP,
                 period=APIHelper.SKIP,
                 submerchant=APIHelper.SKIP,
                 split=APIHelper.SKIP,
                 boleto=APIHelper.SKIP,
                 indirect_acceptor=APIHelper.SKIP):
        """Constructor for the CreateSubscriptionRequest class"""

        # Initialize members of the class
        self.customer = customer 
        self.card = card 
        self.code = code 
        self.payment_method = payment_method 
        self.billing_type = billing_type 
        self.statement_descriptor = statement_descriptor 
        self.description = description 
        self.currency = currency 
        self.interval = interval 
        self.interval_count = interval_count 
        self.pricing_scheme = pricing_scheme 
        self.items = items 
        self.shipping = shipping 
        self.discounts = discounts 
        self.metadata = metadata 
        if setup is not APIHelper.SKIP:
            self.setup = setup 
        if plan_id is not APIHelper.SKIP:
            self.plan_id = plan_id 
        if customer_id is not APIHelper.SKIP:
            self.customer_id = customer_id 
        if card_id is not APIHelper.SKIP:
            self.card_id = card_id 
        if billing_day is not APIHelper.SKIP:
            self.billing_day = billing_day 
        if installments is not APIHelper.SKIP:
            self.installments = installments 
        if start_at is not APIHelper.SKIP:
            self.start_at = APIHelper.apply_datetime_converter(start_at, APIHelper.RFC3339DateTime) if start_at else None 
        if minimum_price is not APIHelper.SKIP:
            self.minimum_price = minimum_price 
        if cycles is not APIHelper.SKIP:
            self.cycles = cycles 
        if card_token is not APIHelper.SKIP:
            self.card_token = card_token 
        if gateway_affiliation_id is not APIHelper.SKIP:
            self.gateway_affiliation_id = gateway_affiliation_id 
        if quantity is not APIHelper.SKIP:
            self.quantity = quantity 
        if boleto_due_days is not APIHelper.SKIP:
            self.boleto_due_days = boleto_due_days 
        self.increments = increments 
        if period is not APIHelper.SKIP:
            self.period = period 
        if submerchant is not APIHelper.SKIP:
            self.submerchant = submerchant 
        if split is not APIHelper.SKIP:
            self.split = split 
        if boleto is not APIHelper.SKIP:
            self.boleto = boleto 
        if indirect_acceptor is not APIHelper.SKIP:
            self.indirect_acceptor = indirect_acceptor 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        customer = CreateCustomerRequest.from_dictionary(dictionary.get('customer')) if dictionary.get('customer') else None
        card = CreateCardRequest.from_dictionary(dictionary.get('card')) if dictionary.get('card') else None
        code = dictionary.get("code") if dictionary.get("code") else None
        payment_method = dictionary.get("payment_method") if dictionary.get("payment_method") else None
        billing_type = dictionary.get("billing_type") if dictionary.get("billing_type") else None
        statement_descriptor = dictionary.get("statement_descriptor") if dictionary.get("statement_descriptor") else None
        description = dictionary.get("description") if dictionary.get("description") else None
        currency = dictionary.get("currency") if dictionary.get("currency") else None
        interval = dictionary.get("interval") if dictionary.get("interval") else None
        interval_count = dictionary.get("interval_count") if dictionary.get("interval_count") else None
        pricing_scheme = CreatePricingSchemeRequest.from_dictionary(dictionary.get('pricing_scheme')) if dictionary.get('pricing_scheme') else None
        items = None
        if dictionary.get('items') is not None:
            items = [CreateSubscriptionItemRequest.from_dictionary(x) for x in dictionary.get('items')]
        shipping = CreateShippingRequest.from_dictionary(dictionary.get('shipping')) if dictionary.get('shipping') else None
        discounts = None
        if dictionary.get('discounts') is not None:
            discounts = [CreateDiscountRequest.from_dictionary(x) for x in dictionary.get('discounts')]
        metadata = dictionary.get("metadata") if dictionary.get("metadata") else None
        increments = None
        if dictionary.get('increments') is not None:
            increments = [CreateIncrementRequest.from_dictionary(x) for x in dictionary.get('increments')]
        setup = CreateSetupRequest.from_dictionary(dictionary.get('setup')) if 'setup' in dictionary.keys() else APIHelper.SKIP
        plan_id = dictionary.get("plan_id") if dictionary.get("plan_id") else APIHelper.SKIP
        customer_id = dictionary.get("customer_id") if dictionary.get("customer_id") else APIHelper.SKIP
        card_id = dictionary.get("card_id") if dictionary.get("card_id") else APIHelper.SKIP
        billing_day = dictionary.get("billing_day") if dictionary.get("billing_day") else APIHelper.SKIP
        installments = dictionary.get("installments") if dictionary.get("installments") else APIHelper.SKIP
        start_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("start_at")).datetime if dictionary.get("start_at") else APIHelper.SKIP
        minimum_price = dictionary.get("minimum_price") if dictionary.get("minimum_price") else APIHelper.SKIP
        cycles = dictionary.get("cycles") if dictionary.get("cycles") else APIHelper.SKIP
        card_token = dictionary.get("card_token") if dictionary.get("card_token") else APIHelper.SKIP
        gateway_affiliation_id = dictionary.get("gateway_affiliation_id") if dictionary.get("gateway_affiliation_id") else APIHelper.SKIP
        quantity = dictionary.get("quantity") if dictionary.get("quantity") else APIHelper.SKIP
        boleto_due_days = dictionary.get("boleto_due_days") if dictionary.get("boleto_due_days") else APIHelper.SKIP
        period = CreatePeriodRequest.from_dictionary(dictionary.get('period')) if 'period' in dictionary.keys() else APIHelper.SKIP
        submerchant = CreateSubMerchantRequest.from_dictionary(dictionary.get('submerchant')) if 'submerchant' in dictionary.keys() else APIHelper.SKIP
        split = CreateSubscriptionSplitRequest.from_dictionary(dictionary.get('split')) if 'split' in dictionary.keys() else APIHelper.SKIP
        boleto = CreateSubscriptionBoletoRequest.from_dictionary(dictionary.get('boleto')) if 'boleto' in dictionary.keys() else APIHelper.SKIP
        indirect_acceptor = dictionary.get("indirect_acceptor") if dictionary.get("indirect_acceptor") else APIHelper.SKIP
        # Return an object of this model
        return cls(customer,
                   card,
                   code,
                   payment_method,
                   billing_type,
                   statement_descriptor,
                   description,
                   currency,
                   interval,
                   interval_count,
                   pricing_scheme,
                   items,
                   shipping,
                   discounts,
                   metadata,
                   increments,
                   setup,
                   plan_id,
                   customer_id,
                   card_id,
                   billing_day,
                   installments,
                   start_at,
                   minimum_price,
                   cycles,
                   card_token,
                   gateway_affiliation_id,
                   quantity,
                   boleto_due_days,
                   period,
                   submerchant,
                   split,
                   boleto,
                   indirect_acceptor)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'customer={self.customer!r}, '
                f'card={self.card!r}, '
                f'code={self.code!r}, '
                f'payment_method={self.payment_method!r}, '
                f'billing_type={self.billing_type!r}, '
                f'statement_descriptor={self.statement_descriptor!r}, '
                f'description={self.description!r}, '
                f'currency={self.currency!r}, '
                f'interval={self.interval!r}, '
                f'interval_count={self.interval_count!r}, '
                f'pricing_scheme={self.pricing_scheme!r}, '
                f'items={self.items!r}, '
                f'shipping={self.shipping!r}, '
                f'discounts={self.discounts!r}, '
                f'metadata={self.metadata!r}, '
                f'setup={(self.setup if hasattr(self, "setup") else None)!r}, '
                f'plan_id={(self.plan_id if hasattr(self, "plan_id") else None)!r}, '
                f'customer_id={(self.customer_id if hasattr(self, "customer_id") else None)!r}, '
                f'card_id={(self.card_id if hasattr(self, "card_id") else None)!r}, '
                f'billing_day={(self.billing_day if hasattr(self, "billing_day") else None)!r}, '
                f'installments={(self.installments if hasattr(self, "installments") else None)!r}, '
                f'start_at={(self.start_at if hasattr(self, "start_at") else None)!r}, '
                f'minimum_price={(self.minimum_price if hasattr(self, "minimum_price") else None)!r}, '
                f'cycles={(self.cycles if hasattr(self, "cycles") else None)!r}, '
                f'card_token={(self.card_token if hasattr(self, "card_token") else None)!r}, '
                f'gateway_affiliation_id={(self.gateway_affiliation_id if hasattr(self, "gateway_affiliation_id") else None)!r}, '
                f'quantity={(self.quantity if hasattr(self, "quantity") else None)!r}, '
                f'boleto_due_days={(self.boleto_due_days if hasattr(self, "boleto_due_days") else None)!r}, '
                f'increments={self.increments!r}, '
                f'period={(self.period if hasattr(self, "period") else None)!r}, '
                f'submerchant={(self.submerchant if hasattr(self, "submerchant") else None)!r}, '
                f'split={(self.split if hasattr(self, "split") else None)!r}, '
                f'boleto={(self.boleto if hasattr(self, "boleto") else None)!r}, '
                f'indirect_acceptor={(self.indirect_acceptor if hasattr(self, "indirect_acceptor") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'customer={self.customer!s}, '
                f'card={self.card!s}, '
                f'code={self.code!s}, '
                f'payment_method={self.payment_method!s}, '
                f'billing_type={self.billing_type!s}, '
                f'statement_descriptor={self.statement_descriptor!s}, '
                f'description={self.description!s}, '
                f'currency={self.currency!s}, '
                f'interval={self.interval!s}, '
                f'interval_count={self.interval_count!s}, '
                f'pricing_scheme={self.pricing_scheme!s}, '
                f'items={self.items!s}, '
                f'shipping={self.shipping!s}, '
                f'discounts={self.discounts!s}, '
                f'metadata={self.metadata!s}, '
                f'setup={(self.setup if hasattr(self, "setup") else None)!s}, '
                f'plan_id={(self.plan_id if hasattr(self, "plan_id") else None)!s}, '
                f'customer_id={(self.customer_id if hasattr(self, "customer_id") else None)!s}, '
                f'card_id={(self.card_id if hasattr(self, "card_id") else None)!s}, '
                f'billing_day={(self.billing_day if hasattr(self, "billing_day") else None)!s}, '
                f'installments={(self.installments if hasattr(self, "installments") else None)!s}, '
                f'start_at={(self.start_at if hasattr(self, "start_at") else None)!s}, '
                f'minimum_price={(self.minimum_price if hasattr(self, "minimum_price") else None)!s}, '
                f'cycles={(self.cycles if hasattr(self, "cycles") else None)!s}, '
                f'card_token={(self.card_token if hasattr(self, "card_token") else None)!s}, '
                f'gateway_affiliation_id={(self.gateway_affiliation_id if hasattr(self, "gateway_affiliation_id") else None)!s}, '
                f'quantity={(self.quantity if hasattr(self, "quantity") else None)!s}, '
                f'boleto_due_days={(self.boleto_due_days if hasattr(self, "boleto_due_days") else None)!s}, '
                f'increments={self.increments!s}, '
                f'period={(self.period if hasattr(self, "period") else None)!s}, '
                f'submerchant={(self.submerchant if hasattr(self, "submerchant") else None)!s}, '
                f'split={(self.split if hasattr(self, "split") else None)!s}, '
                f'boleto={(self.boleto if hasattr(self, "boleto") else None)!s}, '
                f'indirect_acceptor={(self.indirect_acceptor if hasattr(self, "indirect_acceptor") else None)!s})')

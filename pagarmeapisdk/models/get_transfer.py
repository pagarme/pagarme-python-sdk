# -*- coding: utf-8 -*-

"""
pagarmeapisdk

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pagarmeapisdk.api_helper import APIHelper
from pagarmeapisdk.models.get_transfer_source_response import GetTransferSourceResponse
from pagarmeapisdk.models.get_transfer_target_response import GetTransferTargetResponse


class GetTransfer(object):

    """Implementation of the 'GetTransfer' model.

    Attributes:
        id (str): The model property of type str.
        gateway_id (str): The model property of type str.
        amount (int): The model property of type int.
        status (str): The model property of type str.
        created_at (datetime): The model property of type datetime.
        updated_at (datetime): The model property of type datetime.
        metadata (Dict[str, str]): The model property of type Dict[str, str].
        fee (int): The model property of type int.
        funding_date (datetime): The model property of type datetime.
        funding_estimated_date (datetime): The model property of type datetime.
        mtype (str): The model property of type str.
        source (GetTransferSourceResponse): The model property of type
            GetTransferSourceResponse.
        target (GetTransferTargetResponse): The model property of type
            GetTransferTargetResponse.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id": 'id',
        "gateway_id": 'gateway_id',
        "amount": 'amount',
        "status": 'status',
        "created_at": 'created_at',
        "updated_at": 'updated_at',
        "mtype": 'type',
        "source": 'source',
        "target": 'target',
        "metadata": 'metadata',
        "fee": 'fee',
        "funding_date": 'funding_date',
        "funding_estimated_date": 'funding_estimated_date'
    }

    _optionals = [
        'metadata',
        'fee',
        'funding_date',
        'funding_estimated_date',
    ]

    def __init__(self,
                 id=None,
                 gateway_id=None,
                 amount=None,
                 status=None,
                 created_at=None,
                 updated_at=None,
                 mtype=None,
                 source=None,
                 target=None,
                 metadata=APIHelper.SKIP,
                 fee=APIHelper.SKIP,
                 funding_date=APIHelper.SKIP,
                 funding_estimated_date=APIHelper.SKIP):
        """Constructor for the GetTransfer class"""

        # Initialize members of the class
        self.id = id 
        self.gateway_id = gateway_id 
        self.amount = amount 
        self.status = status 
        self.created_at = APIHelper.apply_datetime_converter(created_at, APIHelper.RFC3339DateTime) if created_at else None 
        self.updated_at = APIHelper.apply_datetime_converter(updated_at, APIHelper.RFC3339DateTime) if updated_at else None 
        if metadata is not APIHelper.SKIP:
            self.metadata = metadata 
        if fee is not APIHelper.SKIP:
            self.fee = fee 
        if funding_date is not APIHelper.SKIP:
            self.funding_date = APIHelper.apply_datetime_converter(funding_date, APIHelper.RFC3339DateTime) if funding_date else None 
        if funding_estimated_date is not APIHelper.SKIP:
            self.funding_estimated_date = APIHelper.apply_datetime_converter(funding_estimated_date, APIHelper.RFC3339DateTime) if funding_estimated_date else None 
        self.mtype = mtype 
        self.source = source 
        self.target = target 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get("id") if dictionary.get("id") else None
        gateway_id = dictionary.get("gateway_id") if dictionary.get("gateway_id") else None
        amount = dictionary.get("amount") if dictionary.get("amount") else None
        status = dictionary.get("status") if dictionary.get("status") else None
        created_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("created_at")).datetime if dictionary.get("created_at") else None
        updated_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("updated_at")).datetime if dictionary.get("updated_at") else None
        mtype = dictionary.get("type") if dictionary.get("type") else None
        source = GetTransferSourceResponse.from_dictionary(dictionary.get('source')) if dictionary.get('source') else None
        target = GetTransferTargetResponse.from_dictionary(dictionary.get('target')) if dictionary.get('target') else None
        metadata = dictionary.get("metadata") if dictionary.get("metadata") else APIHelper.SKIP
        fee = dictionary.get("fee") if dictionary.get("fee") else APIHelper.SKIP
        funding_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("funding_date")).datetime if dictionary.get("funding_date") else APIHelper.SKIP
        funding_estimated_date = APIHelper.RFC3339DateTime.from_value(dictionary.get("funding_estimated_date")).datetime if dictionary.get("funding_estimated_date") else APIHelper.SKIP
        # Return an object of this model
        return cls(id,
                   gateway_id,
                   amount,
                   status,
                   created_at,
                   updated_at,
                   mtype,
                   source,
                   target,
                   metadata,
                   fee,
                   funding_date,
                   funding_estimated_date)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'id={self.id!r}, '
                f'gateway_id={self.gateway_id!r}, '
                f'amount={self.amount!r}, '
                f'status={self.status!r}, '
                f'created_at={self.created_at!r}, '
                f'updated_at={self.updated_at!r}, '
                f'metadata={(self.metadata if hasattr(self, "metadata") else None)!r}, '
                f'fee={(self.fee if hasattr(self, "fee") else None)!r}, '
                f'funding_date={(self.funding_date if hasattr(self, "funding_date") else None)!r}, '
                f'funding_estimated_date={(self.funding_estimated_date if hasattr(self, "funding_estimated_date") else None)!r}, '
                f'mtype={self.mtype!r}, '
                f'source={self.source!r}, '
                f'target={self.target!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'id={self.id!s}, '
                f'gateway_id={self.gateway_id!s}, '
                f'amount={self.amount!s}, '
                f'status={self.status!s}, '
                f'created_at={self.created_at!s}, '
                f'updated_at={self.updated_at!s}, '
                f'metadata={(self.metadata if hasattr(self, "metadata") else None)!s}, '
                f'fee={(self.fee if hasattr(self, "fee") else None)!s}, '
                f'funding_date={(self.funding_date if hasattr(self, "funding_date") else None)!s}, '
                f'funding_estimated_date={(self.funding_estimated_date if hasattr(self, "funding_estimated_date") else None)!s}, '
                f'mtype={self.mtype!s}, '
                f'source={self.source!s}, '
                f'target={self.target!s})')

# -*- coding: utf-8 -*-

"""
pagarmeapisdk

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pagarmeapisdk.api_helper import APIHelper
from pagarmeapisdk.models.create_bank_account_request import CreateBankAccountRequest
from pagarmeapisdk.models.create_register_information_base_request import CreateRegisterInformationBaseRequest
from pagarmeapisdk.models.create_transfer_settings_request import CreateTransferSettingsRequest


class CreateRecipientRequest(object):

    """Implementation of the 'CreateRecipientRequest' model.

    Request for creating a recipient

    Attributes:
        name (str): Recipient name. Required if the register_information field
            isn't populated.
        email (str): Recipient email. Required if the register_information
            field isn't populated.
        description (str): Recipient description
        document (str): Recipient document number. Required if the
            register_information field isn't populated.
        mtype (str): Recipient type. Required if the register_information
            field isn't populated.
        default_bank_account (CreateBankAccountRequest): Bank account
        metadata (Dict[str, str]): Metadata
        transfer_settings (CreateTransferSettingsRequest): Receiver Transfer
            Information
        code (str): Recipient code
        payment_mode (str): Payment mode
        register_information (CreateRegisterInformationBaseRequest): Register
            Information

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "default_bank_account": 'default_bank_account',
        "metadata": 'metadata',
        "code": 'code',
        "payment_mode": 'payment_mode',
        "name": 'name',
        "email": 'email',
        "description": 'description',
        "document": 'document',
        "mtype": 'type',
        "transfer_settings": 'transfer_settings',
        "register_information": 'register_information'
    }

    _optionals = [
        'name',
        'email',
        'description',
        'document',
        'mtype',
        'transfer_settings',
        'register_information',
    ]

    _nullables = [
        'name',
        'email',
        'description',
        'document',
        'mtype',
        'register_information',
    ]

    def __init__(self,
                 default_bank_account=None,
                 metadata=None,
                 code=None,
                 payment_mode='bank_transfer',
                 name=APIHelper.SKIP,
                 email=APIHelper.SKIP,
                 description=APIHelper.SKIP,
                 document=APIHelper.SKIP,
                 mtype=APIHelper.SKIP,
                 transfer_settings=APIHelper.SKIP,
                 register_information=APIHelper.SKIP):
        """Constructor for the CreateRecipientRequest class"""

        # Initialize members of the class
        if name is not APIHelper.SKIP:
            self.name = name 
        if email is not APIHelper.SKIP:
            self.email = email 
        if description is not APIHelper.SKIP:
            self.description = description 
        if document is not APIHelper.SKIP:
            self.document = document 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        self.default_bank_account = default_bank_account 
        self.metadata = metadata 
        if transfer_settings is not APIHelper.SKIP:
            self.transfer_settings = transfer_settings 
        self.code = code 
        self.payment_mode = payment_mode 
        if register_information is not APIHelper.SKIP:
            self.register_information = register_information 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        default_bank_account = CreateBankAccountRequest.from_dictionary(dictionary.get('default_bank_account')) if dictionary.get('default_bank_account') else None
        metadata = dictionary.get("metadata") if dictionary.get("metadata") else None
        code = dictionary.get("code") if dictionary.get("code") else None
        payment_mode = dictionary.get("payment_mode") if dictionary.get("payment_mode") else 'bank_transfer'
        name = dictionary.get("name") if "name" in dictionary.keys() else APIHelper.SKIP
        email = dictionary.get("email") if "email" in dictionary.keys() else APIHelper.SKIP
        description = dictionary.get("description") if "description" in dictionary.keys() else APIHelper.SKIP
        document = dictionary.get("document") if "document" in dictionary.keys() else APIHelper.SKIP
        mtype = dictionary.get("type") if "type" in dictionary.keys() else APIHelper.SKIP
        transfer_settings = CreateTransferSettingsRequest.from_dictionary(dictionary.get('transfer_settings')) if 'transfer_settings' in dictionary.keys() else APIHelper.SKIP
        if 'register_information' in dictionary.keys():
            register_information = CreateRegisterInformationBaseRequest.from_dictionary(dictionary.get('register_information')) if dictionary.get('register_information') else None
        else:
            register_information = APIHelper.SKIP
        # Return an object of this model
        return cls(default_bank_account,
                   metadata,
                   code,
                   payment_mode,
                   name,
                   email,
                   description,
                   document,
                   mtype,
                   transfer_settings,
                   register_information)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'name={(self.name if hasattr(self, "name") else None)!r}, '
                f'email={(self.email if hasattr(self, "email") else None)!r}, '
                f'description={(self.description if hasattr(self, "description") else None)!r}, '
                f'document={(self.document if hasattr(self, "document") else None)!r}, '
                f'mtype={(self.mtype if hasattr(self, "mtype") else None)!r}, '
                f'default_bank_account={self.default_bank_account!r}, '
                f'metadata={self.metadata!r}, '
                f'transfer_settings={(self.transfer_settings if hasattr(self, "transfer_settings") else None)!r}, '
                f'code={self.code!r}, '
                f'payment_mode={self.payment_mode!r}, '
                f'register_information={(self.register_information if hasattr(self, "register_information") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'name={(self.name if hasattr(self, "name") else None)!s}, '
                f'email={(self.email if hasattr(self, "email") else None)!s}, '
                f'description={(self.description if hasattr(self, "description") else None)!s}, '
                f'document={(self.document if hasattr(self, "document") else None)!s}, '
                f'mtype={(self.mtype if hasattr(self, "mtype") else None)!s}, '
                f'default_bank_account={self.default_bank_account!s}, '
                f'metadata={self.metadata!s}, '
                f'transfer_settings={(self.transfer_settings if hasattr(self, "transfer_settings") else None)!s}, '
                f'code={self.code!s}, '
                f'payment_mode={self.payment_mode!s}, '
                f'register_information={(self.register_information if hasattr(self, "register_information") else None)!s})')

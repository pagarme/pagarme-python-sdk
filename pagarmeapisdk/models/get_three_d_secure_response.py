# -*- coding: utf-8 -*-

"""
pagarmeapisdk

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pagarmeapisdk.api_helper import APIHelper


class GetThreeDSecureResponse(object):

    """Implementation of the 'GetThreeDSecureResponse' model.

    3D-S payment authentication response

    Attributes:
        mpi (str): MPI Vendor
        eci (str): Electronic Commerce Indicator (ECI) (Opcional)
        cavv (str): Online payment cryptogram, definido pelo 3-D Secure.
        transaction_id (str): Identificador da transação (XID)
        success_url (str): Url de redirecionamento de sucessso

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "mpi": 'mpi',
        "eci": 'eci',
        "cavv": 'cavv',
        "transaction_id": 'transaction_Id',
        "success_url": 'success_url'
    }

    _optionals = [
        'mpi',
        'eci',
        'cavv',
        'transaction_id',
        'success_url',
    ]

    _nullables = [
        'mpi',
        'eci',
        'cavv',
        'transaction_id',
        'success_url',
    ]

    def __init__(self,
                 mpi=APIHelper.SKIP,
                 eci=APIHelper.SKIP,
                 cavv=APIHelper.SKIP,
                 transaction_id=APIHelper.SKIP,
                 success_url=APIHelper.SKIP):
        """Constructor for the GetThreeDSecureResponse class"""

        # Initialize members of the class
        if mpi is not APIHelper.SKIP:
            self.mpi = mpi 
        if eci is not APIHelper.SKIP:
            self.eci = eci 
        if cavv is not APIHelper.SKIP:
            self.cavv = cavv 
        if transaction_id is not APIHelper.SKIP:
            self.transaction_id = transaction_id 
        if success_url is not APIHelper.SKIP:
            self.success_url = success_url 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        mpi = dictionary.get("mpi") if "mpi" in dictionary.keys() else APIHelper.SKIP
        eci = dictionary.get("eci") if "eci" in dictionary.keys() else APIHelper.SKIP
        cavv = dictionary.get("cavv") if "cavv" in dictionary.keys() else APIHelper.SKIP
        transaction_id = dictionary.get("transaction_Id") if "transaction_Id" in dictionary.keys() else APIHelper.SKIP
        success_url = dictionary.get("success_url") if "success_url" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(mpi,
                   eci,
                   cavv,
                   transaction_id,
                   success_url)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'mpi={(self.mpi if hasattr(self, "mpi") else None)!r}, '
                f'eci={(self.eci if hasattr(self, "eci") else None)!r}, '
                f'cavv={(self.cavv if hasattr(self, "cavv") else None)!r}, '
                f'transaction_id={(self.transaction_id if hasattr(self, "transaction_id") else None)!r}, '
                f'success_url={(self.success_url if hasattr(self, "success_url") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'mpi={(self.mpi if hasattr(self, "mpi") else None)!s}, '
                f'eci={(self.eci if hasattr(self, "eci") else None)!s}, '
                f'cavv={(self.cavv if hasattr(self, "cavv") else None)!s}, '
                f'transaction_id={(self.transaction_id if hasattr(self, "transaction_id") else None)!s}, '
                f'success_url={(self.success_url if hasattr(self, "success_url") else None)!s})')

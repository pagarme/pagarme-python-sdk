# -*- coding: utf-8 -*-

"""
pagarmeapisdk

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pagarmeapisdk.api_helper import APIHelper


class GetAntifraudResponse(object):

    """Implementation of the 'GetAntifraudResponse' model.

    Attributes:
        status (str): The model property of type str.
        return_code (str): The model property of type str.
        return_message (str): The model property of type str.
        provider_name (str): The model property of type str.
        score (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "status": 'status',
        "return_code": 'return_code',
        "return_message": 'return_message',
        "provider_name": 'provider_name',
        "score": 'score'
    }

    _optionals = [
        'status',
        'return_code',
        'return_message',
        'provider_name',
        'score',
    ]

    _nullables = [
        'status',
        'return_code',
        'return_message',
        'provider_name',
        'score',
    ]

    def __init__(self,
                 status=APIHelper.SKIP,
                 return_code=APIHelper.SKIP,
                 return_message=APIHelper.SKIP,
                 provider_name=APIHelper.SKIP,
                 score=APIHelper.SKIP):
        """Constructor for the GetAntifraudResponse class"""

        # Initialize members of the class
        if status is not APIHelper.SKIP:
            self.status = status 
        if return_code is not APIHelper.SKIP:
            self.return_code = return_code 
        if return_message is not APIHelper.SKIP:
            self.return_message = return_message 
        if provider_name is not APIHelper.SKIP:
            self.provider_name = provider_name 
        if score is not APIHelper.SKIP:
            self.score = score 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        status = dictionary.get("status") if "status" in dictionary.keys() else APIHelper.SKIP
        return_code = dictionary.get("return_code") if "return_code" in dictionary.keys() else APIHelper.SKIP
        return_message = dictionary.get("return_message") if "return_message" in dictionary.keys() else APIHelper.SKIP
        provider_name = dictionary.get("provider_name") if "provider_name" in dictionary.keys() else APIHelper.SKIP
        score = dictionary.get("score") if "score" in dictionary.keys() else APIHelper.SKIP
        # Return an object of this model
        return cls(status,
                   return_code,
                   return_message,
                   provider_name,
                   score)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'status={(self.status if hasattr(self, "status") else None)!r}, '
                f'return_code={(self.return_code if hasattr(self, "return_code") else None)!r}, '
                f'return_message={(self.return_message if hasattr(self, "return_message") else None)!r}, '
                f'provider_name={(self.provider_name if hasattr(self, "provider_name") else None)!r}, '
                f'score={(self.score if hasattr(self, "score") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'status={(self.status if hasattr(self, "status") else None)!s}, '
                f'return_code={(self.return_code if hasattr(self, "return_code") else None)!s}, '
                f'return_message={(self.return_message if hasattr(self, "return_message") else None)!s}, '
                f'provider_name={(self.provider_name if hasattr(self, "provider_name") else None)!s}, '
                f'score={(self.score if hasattr(self, "score") else None)!s})')

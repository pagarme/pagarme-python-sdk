# -*- coding: utf-8 -*-

"""
pagarmeapisdk

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from pagarmeapisdk.api_helper import APIHelper
from pagarmeapisdk.models.create_google_pay_request import CreateGooglePayRequest


class CreateCardPayloadRequest(object):

    """Implementation of the 'CreateCardPayloadRequest' model.

    Attributes:
        mtype (str): The model property of type str.
        google_pay (CreateGooglePayRequest): The model property of type
            CreateGooglePayRequest.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "mtype": 'type',
        "google_pay": 'google_pay'
    }

    _optionals = [
        'mtype',
        'google_pay',
    ]

    _nullables = [
        'mtype',
        'google_pay',
    ]

    def __init__(self,
                 mtype=APIHelper.SKIP,
                 google_pay=APIHelper.SKIP):
        """Constructor for the CreateCardPayloadRequest class"""

        # Initialize members of the class
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        if google_pay is not APIHelper.SKIP:
            self.google_pay = google_pay 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        mtype = dictionary.get("type") if "type" in dictionary.keys() else APIHelper.SKIP
        if 'google_pay' in dictionary.keys():
            google_pay = CreateGooglePayRequest.from_dictionary(dictionary.get('google_pay')) if dictionary.get('google_pay') else None
        else:
            google_pay = APIHelper.SKIP
        # Return an object of this model
        return cls(mtype,
                   google_pay)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'mtype={(self.mtype if hasattr(self, "mtype") else None)!r}, '
                f'google_pay={(self.google_pay if hasattr(self, "google_pay") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'mtype={(self.mtype if hasattr(self, "mtype") else None)!s}, '
                f'google_pay={(self.google_pay if hasattr(self, "google_pay") else None)!s})')
